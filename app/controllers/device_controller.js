// Generated by CoffeeScript 1.6.3
var async, checkDocType, createFilter, db, filter, randomString, request;

load('application');

async = require("async");

db = require('./helpers/db_connect_helper').db_connect();

checkDocType = require('./lib/token').checkDocType;

request = require('./lib/request');

filter = require('./lib/default_filter');

before('permissions', function() {
  var auth,
    _this = this;
  auth = req.header('authorization');
  return checkDocType(auth, "device", function(err, appName, isAuthorized) {
    if (!appName) {
      err = new Error("Application is not authenticated");
      return send({
        error: err
      }, 401);
    } else if (!isAuthorized) {
      err = new Error("Application is not authorized");
      return send({
        error: err
      }, 403);
    } else {
      _this.appName = appName;
      return next();
    }
  });
});

before('lock request', function() {
  var _this = this;
  this.lock = "" + params.id;
  return app.locker.runIfUnlock(this.lock, function() {
    app.locker.addLock(_this.lock);
    return next();
  });
}, {
  only: ['remove']
});

after('unlock request', function() {
  return app.locker.removeLock(this.lock);
}, {
  only: ['remove']
});

before('get doc', function() {
  var _this = this;
  return db.get(params.id, function(err, doc) {
    if (err && err.error === "not_found") {
      app.locker.removeLock(_this.lock);
      return send({
        error: "not found"
      }, 404);
    } else if (err) {
      console.log("[Get doc] err: " + JSON.stringify(err));
      app.locker.removeLock(_this.lock);
      return send({
        error: err
      }, 500);
    } else if (doc != null) {
      _this.doc = doc;
      return next();
    } else {
      app.locker.removeLock(_this.lock);
      return send({
        error: "not found"
      }, 404);
    }
  });
}, {
  only: ['remove']
});

randomString = function(length) {
  var string;
  string = "";
  while (string.length < length) {
    string = string + Math.random().toString(36).substr(2);
  }
  return string.substr(0, length);
};

createFilter = function(id, callback) {
  var _this = this;
  return db.get("_design/" + id, function(err, res) {
    var designDoc, filterFunction, filterName;
    if (err && err.error === 'not_found') {
      designDoc = {};
      filterFunction = filter.get(id);
      if (filterFunction === null) {
        send({
          error: true,
          msg: "This default filter doesn't exist"
        }, 400);
      }
      designDoc.filters = filterFunction;
      return db.save("_design/" + id, {
        views: {},
        filters: designDoc
      }, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return callback(null);
        }
      });
    } else if (err) {
      return callback(err.message);
    } else {
      designDoc = res.filters;
      filterName = id + "filter";
      filterFunction = filter.get(defaultFilter, id);
      designDoc.filters = filterFunction;
      return db.merge("_design/" + id, {
        filters: filters
      }, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return callback(null);
        }
      });
    }
  });
};

action('create', function() {
  var device;
  device = {
    login: body.login,
    password: randomString(32),
    docType: "Device"
  };
  return db.view('device/byLogin', {
    key: device.login
  }, function(err, res) {
    var _this = this;
    if (res.length !== 0) {
      return send({
        error: true,
        msg: "This name is already used"
      }, 400);
    } else {
      return db.save(device, function(err, res) {
        return createFilter(res._id, function(err) {
          if (err) {
            return send({
              error: true,
              msg: err
            }, 500);
          } else {
            device.id = res._id;
            return send(device, 200);
          }
        });
      });
    }
  });
});

action('remove', function() {
  var id,
    _this = this;
  id = params.id;
  return db.remove("_design/" + id, function(err, res) {
    if (err) {
      console.log("[Definition] err: " + JSON.stringify(err));
      return send({
        error: true,
        msg: err.message
      }, 500);
    } else {
      return db.remove(id, _this.doc._rev, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return send({
            success: true
          }, 204);
        }
      });
    }
  });
});
