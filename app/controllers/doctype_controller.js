// Generated by CoffeeScript 1.7.1
var Client, DocType, db, docTypeExist, docTypeManager, git;

load('application');

git = require('git-rev');

Client = require("request-json").JsonClient;

DocType = require('./lib/doctype');

docTypeManager = new DocType();

db = require('./helpers/db_connect_helper').db_connect();

before('get doc', function() {
  return db.get(params.id, (function(_this) {
    return function(err, doc) {
      if (err && err.error === "not_found") {
        app.locker.removeLock(_this.lock);
        return send({
          error: "not found"
        }, 404);
      } else if (err) {
        console.log("[Get doc] err: " + JSON.stringify(err));
        app.locker.removeLock(_this.lock);
        return send({
          error: err
        }, 500);
      } else if (doc != null) {
        _this.doc = doc;
        return next();
      } else {
        app.locker.removeLock(_this.lock);
        return send({
          error: "not found"
        }, 404);
      }
    };
  })(this));
}, {
  only: ['delete']
});

docTypeExist = function(name, callback) {
  var findDocType;
  findDocType = (function(_this) {
    return function(name, docTypes, callback) {
      var docType, id;
      if (docTypes.length > 0) {
        docType = docTypes.pop();
        id = docType.value._id;
        return db.get(id, function(err, res) {
          if (err) {
            return callback(err);
          } else if (res.name.toLowerCase() === name) {
            return callback(null, true);
          } else {
            return findDocType(name, docTypes, callback);
          }
        });
      } else {
        return callback(null, false);
      }
    };
  })(this);
  return docTypeManager.getDocTypes(function(err, docTypes) {
    if (err) {
      railway.logger.write("[docTypeExist] err: " + JSON.stringify(err));
      return send(500);
    } else {
      return findDocType(name, docTypes, (function(_this) {
        return function(err, exist) {
          if (err) {
            railway.logger.write("[docTypeExist] err: " + JSON.stringify(err));
            return send(500);
          } else {
            return callback(null, exist);
          }
        };
      })(this));
    }
  });
};

action('create', function() {
  delete body._attachments;
  if (((body.docType != null) && body.docType.toLowerCase() !== "doctype") || !body.name) {
    return send({
      error: "docType should be equal to 'docType' and field name are " + "required"
    }, 409);
  } else {
    return docTypeExist(body.name.toLowerCase(), (function(_this) {
      return function(err, exist) {
        if (exist) {
          return send({
            error: "docType is already created"
          }, 409);
        } else {
          body.docType = "doctype";
          if (params.id) {
            return db.get(params.id, function(err, doc) {
              if (doc) {
                return send({
                  error: "The document exists"
                }, 409);
              } else {
                return db.save(params.id, body, function(err, res) {
                  if (err) {
                    return send({
                      error: err.message
                    }, 409);
                  } else {
                    return send({
                      "_id": res.id
                    }, 201);
                  }
                });
              }
            });
          } else {
            return db.save(body, function(err, res) {
              if (err) {
                railway.logger.write("[Create] err: " + JSON.stringify(err));
                return send({
                  error: err.message
                }, 500);
              } else {
                return send({
                  "_id": res.id
                }, 201);
              }
            });
          }
        }
      };
    })(this));
  }
});

action('delete', function() {
  var send_success;
  send_success = function() {
    send({
      success: true
    }, 204);
    return app.feed.feed.removeListener("deletion." + params.id, send_success);
  };
  return db.remove(params.id, this.doc.rev, (function(_this) {
    return function(err, res) {
      if (err) {
        console.log("[Delete] err: " + JSON.stringify(err));
        return send({
          error: err.message
        }, 500);
      } else {
        return app.feed.feed.on("deletion." + params.id, send_success);
      }
    };
  })(this));
});
