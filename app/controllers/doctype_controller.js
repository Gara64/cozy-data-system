// Generated by CoffeeScript 1.6.3
var Client, DocType, db, docTypeExist, docTypeManager, git;

load('application');

git = require('git-rev');

Client = require("request-json").JsonClient;

DocType = require('./lib/doctype');

docTypeManager = new DocType();

db = require('./helpers/db_connect_helper').db_connect();

before('get doc', function() {
  var _this = this;
  return db.get(params.id, function(err, doc) {
    if (err && err.error === "not_found") {
      app.locker.removeLock(_this.lock);
      return send({
        error: "not found"
      }, 404);
    } else if (err) {
      console.log("[Get doc] err: " + JSON.stringify(err));
      app.locker.removeLock(_this.lock);
      return send({
        error: err
      }, 500);
    } else if (doc != null) {
      _this.doc = doc;
      return next();
    } else {
      app.locker.removeLock(_this.lock);
      return send({
        error: "not found"
      }, 404);
    }
  });
}, {
  only: ['delete']
});

docTypeExist = function(name, callback) {
  var findDocType,
    _this = this;
  findDocType = function(name, docTypes, callback) {
    var docType, id;
    if (docTypes.length > 0) {
      docType = docTypes.pop();
      id = docType.value._id;
      return db.get(id, function(err, res) {
        if (err) {
          return callback(err);
        } else if (res.name.toLowerCase() === name) {
          return callback(null, true);
        } else {
          return findDocType(name, docTypes, callback);
        }
      });
    } else {
      return callback(null, false);
    }
  };
  return docTypeManager.getDocTypes(function(err, docTypes) {
    var _this = this;
    if (err) {
      railway.logger.write("[docTypeExist] err: " + JSON.stringify(err));
      return send(500);
    } else {
      return findDocType(name, docTypes, function(err, exist) {
        if (err) {
          railway.logger.write("[docTypeExist] err: " + JSON.stringify(err));
          return send(500);
        } else {
          return callback(null, exist);
        }
      });
    }
  });
};

action('create', function() {
  var _this = this;
  delete body._attachments;
  if (((body.docType != null) && body.docType.toLowerCase() !== "doctype") || !body.name) {
    return send({
      error: "docType should be equal to 'docType' and field name are " + "required"
    }, 409);
  } else {
    return docTypeExist(body.name.toLowerCase(), function(err, exist) {
      if (exist) {
        return send({
          error: "docType is already created"
        }, 409);
      } else {
        body.docType = "doctype";
        if (params.id) {
          return db.get(params.id, function(err, doc) {
            if (doc) {
              return send({
                error: "The document exists"
              }, 409);
            } else {
              return db.save(params.id, body, function(err, res) {
                if (err) {
                  return send({
                    error: err.message
                  }, 409);
                } else {
                  return send({
                    "_id": res.id
                  }, 201);
                }
              });
            }
          });
        } else {
          return db.save(body, function(err, res) {
            if (err) {
              railway.logger.write("[Create] err: " + JSON.stringify(err));
              return send({
                error: err.message
              }, 500);
            } else {
              return send({
                "_id": res.id
              }, 201);
            }
          });
        }
      }
    });
  }
});

action('delete', function() {
  var _this = this;
  return db.remove(params.id, this.doc.rev, function(err, res) {
    var doctype, _ref;
    if (err) {
      console.log("[Delete] err: " + JSON.stringify(err));
      return send({
        error: err.message
      }, 500);
    } else {
      doctype = (_ref = _this.doc.docType) != null ? _ref.toLowerCase() : void 0;
      if (doctype == null) {
        doctype = 'null';
      }
      app.feed.publish("" + doctype + ".delete", _this.doc.id);
      return send({
        success: true
      }, 204);
    }
  });
});
