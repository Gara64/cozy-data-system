// Generated by CoffeeScript 1.6.2
var async, checkDocType, db;

load('application');

async = require("async");

db = require('./helpers/db_connect_helper').db_connect();

checkDocType = require('./lib/token').checkDocType;

before('permissions', function() {
  var auth,
    _this = this;

  auth = req.header('authorization');
  return checkDocType(auth, params.type, function(err, appName, isAuthorized) {
    if (!appName) {
      err = new Error("Application is not authenticated");
      return send({
        error: err
      }, 401);
    } else if (!isAuthorized) {
      err = new Error("Application is not authorized");
      return send({
        error: err
      }, 403);
    } else {
      compound.app.feed.publish('usage.application', appName);
      return next();
    }
  });
});

before('lock request', function() {
  var _this = this;

  this.lock = "" + params.type;
  return compound.app.locker.runIfUnlock(this.lock, function() {
    compound.app.locker.addLock(_this.lock);
    return next();
  });
}, {
  only: ['definition', 'remove']
});

after('unlock request', function() {
  return compound.app.locker.removeLock(this.lock);
}, {
  only: ['definition', 'remove']
});

action('doctypes', function() {
  var out, query;

  query = {
    startkey: "_design/",
    endkey: "_design0",
    include_docs: true
  };
  out = [];
  return db.all(query, function(err, res) {
    var row, _i, _len, _ref, _ref1;

    for (_i = 0, _len = res.length; _i < _len; _i++) {
      row = res[_i];
      if ((_ref = row.doc) != null ? (_ref1 = _ref.views) != null ? _ref1.all : void 0 : void 0) {
        out.push(row.key.replace('_design/', ''));
      }
    }
    return send(out);
  });
});

action('results', function() {
  return db.view("" + params.type + "/" + params.req_name, body, function(err, res) {
    if (err) {
      if (err.error === "not_found") {
        return send({
          error: "not found"
        }, 404);
      } else {
        console.log("[Results] err: " + JSON.stringify(err));
        return send({
          error: err.message
        }, 500);
      }
    } else {
      res.forEach(function(value) {
        return delete value._rev;
      });
      return send(res);
    }
  });
});

action('removeResults', function() {
  var delFunc, removeAllDocs, removeFunc;

  removeFunc = function(res, callback) {
    return db.remove(res.value._id, res.value._rev, callback);
  };
  removeAllDocs = function(res) {
    return async.forEachSeries(res, removeFunc, function(err) {
      if (err) {
        return send({
          error: true,
          msg: err.message
        }, 500);
      } else {
        return delFunc();
      }
    });
  };
  delFunc = function() {
    var query;

    query = JSON.parse(JSON.stringify(body));
    return db.view("" + params.type + "/" + params.req_name, query, function(err, res) {
      if (err) {
        return send({
          error: "not found"
        }, 404);
      } else {
        if (res.length > 0) {
          return removeAllDocs(res);
        } else {
          return send({
            success: true
          }, 204);
        }
      }
    });
  };
  return delFunc();
});

action('definition', function() {
  return db.get("_design/" + params.type, function(err, res) {
    var design_doc, views;

    if (err && err.error === 'not_found') {
      design_doc = {};
      design_doc[params.req_name] = body;
      return db.save("_design/" + params.type, design_doc, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return send({
            success: true
          }, 200);
        }
      });
    } else if (err) {
      return send({
        error: true,
        msg: err.message
      }, 500);
    } else {
      views = res.views;
      views[params.req_name] = body;
      return db.merge("_design/" + params.type, {
        views: views
      }, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return send({
            success: true
          }, 200);
        }
      });
    }
  });
});

action('remove', function() {
  return db.get("_design/" + params.type, function(err, res) {
    var views;

    if (err && err.error === 'not_found') {
      return send({
        error: "not found"
      }, 404);
    } else if (err) {
      return send({
        error: true,
        msg: err.message
      }, 500);
    } else {
      views = res.views;
      delete views[params.req_name];
      return db.merge("_design/" + params.type, {
        views: views
      }, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return send({
            success: true
          }, 204);
        }
      });
    }
  });
});
