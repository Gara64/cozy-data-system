// Generated by CoffeeScript 1.6.2
var async, checkDocType, db, request;

load('application');

async = require("async");

db = require('./helpers/db_connect_helper').db_connect();

checkDocType = require('./lib/token').checkDocType;

request = require('./lib/request');

/*before 'permissions', ->
    auth = req.header('authorization')
    checkDocType auth, params.type, (err, appName, isAuthorized) =>
        if not appName
            err = new Error("Application is not authenticated")
            send error: err, 401
        else if not isAuthorized
            err = new Error("Application is not authorized")
            send error: err, 403
        else
            @appName = appName
            compound.app.feed.publish 'usage.application', appName
            next()

# Lock document to avoid multiple modifications at the same time.
before 'lock request', ->
    @lock = "#{params.type}"
    compound.app.locker.runIfUnlock @lock, =>
        compound.app.locker.addLock @lock
        next()
, only: ['definition', 'remove']

# Unlock document when action is finished
after 'unlock request', ->
    compound.app.locker.removeLock @lock
, only: ['definition', 'remove']
*/


action('definition', function() {
  var _this = this;

  console.log("definition filter");
  return db.get("_design/filter", function(err, res) {
    var design_doc, filters;

    if (err && err.error === 'not_found') {
      design_doc = {};
      design_doc[params.req_name] = body.filter;
      console.log(design_doc);
      return db.save("_design/filter", {
        views: {},
        filters: design_doc
      }, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return send({
            success: true
          }, 200);
        }
      });
    } else if (err) {
      return send({
        error: true,
        msg: err.message
      }, 500);
    } else {
      filters = res.filters;
      filters[params.req_name] = body.filter;
      return db.merge("_design/filter", {
        filters: filters
      }, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return send({
            success: true
          }, 200);
        }
      });
    }
  });
});

action('remove', function() {
  var _this = this;

  return db.get("_design/filter", function(err, res) {
    var filters;

    if (err && err.error === 'not_found') {
      return send({
        error: "not found"
      }, 404);
    } else if (err) {
      return send({
        error: true,
        msg: err.message
      }, 500);
    } else {
      filters = res.filters;
      delete filters[params.req_name];
      return db.merge("_design/filter", {
        views: {},
        filters: filters
      }, function(err, res) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return send({
            error: true,
            msg: err.message
          }, 500);
        } else {
          return send({
            success: true
          }, 204);
        }
      });
    }
  });
});
