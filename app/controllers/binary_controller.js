// Generated by CoffeeScript 1.6.3
var checkPermissions, db, deleteFiles, fs;

load('application');

fs = require("fs");

db = require('./helpers/db_connect_helper').db_connect();

checkPermissions = require('./lib/token').checkDocType;

deleteFiles = function(req, callback) {
  var file, i, key, lasterr, _ref;
  i = 0;
  lasterr = null;
  _ref = req.files;
  for (key in _ref) {
    file = _ref[key];
    i++;
    fs.unlink(file.path, function(err) {
      i--;
      if (lasterr == null) {
        lasterr = err;
      }
      if (i === 0) {
        if (lasterr) {
          console.log(lasterr);
        }
        return callback(lasterr);
      }
    });
  }
  if (i === 0) {
    return callback();
  }
};

before('lock request', function() {
  var _this = this;
  this.lock = "" + params.id;
  return app.locker.runIfUnlock(this.lock, function() {
    app.locker.addLock(_this.lock);
    return next();
  });
}, {
  only: ['addAttachment', 'removeAttachment']
});

after('unlock request', function() {
  return app.locker.removeLock(this.lock);
}, {
  only: ['addAttachment', 'removeAttachment']
});

before('get doc', function() {
  var _this = this;
  return db.get(params.id, function(err, doc) {
    if (err && err.error === "not_found") {
      app.locker.removeLock(_this.lock);
      return deleteFiles(req, function() {
        return send({
          error: err.error
        }, 404);
      });
    } else if (err) {
      console.log("[Attachment] err: " + JSON.stringify(err));
      app.locker.removeLock(_this.lock);
      return deleteFiles(req, function() {
        return send({
          error: err.error
        }, 500);
      });
    } else if (doc != null) {
      _this.doc = doc;
      return next();
    } else {
      app.locker.removeLock(_this.lock);
      return deleteFiles(req, function() {
        return send({
          error: "not found"
        }, 404);
      });
    }
  });
});

before('permissions', function() {
  var auth,
    _this = this;
  auth = req.header('authorization');
  return checkPermissions(auth, this.doc.docType, function(err, appName, isAuthorized) {
    if (!appName) {
      err = new Error("Application is not authenticated");
      return send({
        error: err
      }, 401);
    } else if (!isAuthorized) {
      err = new Error("Application is not authorized");
      return send({
        error: err
      }, 403);
    } else {
      compound.app.feed.publish('usage.application', appName);
      return next();
    }
  });
});

action('addAttachment', function() {
  var attach, binary, file, name, _ref,
    _this = this;
  attach = function(binary, name, file, doc) {
    var fileData, stream;
    fileData = {
      name: name,
      "content-type": file.type
    };
    stream = db.saveAttachment(binary, fileData, function(err, res) {
      var bin, newBin;
      if (err) {
        console.log("[Attachment] err: " + JSON.stringify(err));
        return deleteFiles(req, function() {
          return send({
            error: err.error
          }, 500);
        });
      } else {
        bin = {
          id: res.id,
          rev: res.rev
        };
        if (doc.binary) {
          newBin = doc.binary;
        } else {
          newBin = {};
        }
        newBin[name] = bin;
        return db.merge(doc._id, {
          binary: newBin
        }, function(err, res) {
          return deleteFiles(req, function() {
            return send({
              success: true,
              msg: 'created'
            }, 201);
          });
          /*db.view 'doc/byBinary', key: res.id, (err, res) =>
              console.log err if err
              if res.length > 1
                  for doc in res
                      db.merge doc._id, binary, (err, res) =>
                          console.log err if err
          */

        });
      }
    });
    return fs.createReadStream(file.path).pipe(stream);
  };
  if (req.files["file"] != null) {
    file = req.files["file"];
    if (body.name != null) {
      name = body.name;
    } else {
      name = file.name;
    }
    if (((_ref = this.doc.binary) != null ? _ref[name] : void 0) != null) {
      return db.get(this.doc.binary[name].id, function(err, binary) {
        return attach(binary, name, file, _this.doc);
      });
    } else {
      binary = {
        docType: "Binary"
      };
      return db.save(binary, function(err, binary) {
        return attach(binary, name, file, _this.doc);
      });
    }
  } else {
    console.log("no doc for attachment");
    return send({
      error: true,
      msg: "No file send"
    }, 400);
  }
});

action('getAttachment', function() {
  var name, stream;
  name = params.name;
  if (this.doc.binary && this.doc.binary[name]) {
    stream = db.getAttachment(this.doc.binary[name].id, name, function(err) {
      if (err && (err.error = "not_found")) {
        return send({
          error: err.error
        }, 404);
      } else if (err) {
        return send({
          error: err.error
        }, 500);
      } else {
        return send(200);
      }
    });
    if (req.headers['range'] != null) {
      stream.setHeader('range', req.headers['range']);
    }
    stream.pipe(res);
    return res.on('close', function() {
      return stream.abort();
    });
  } else {
    return send({
      error: 'not_found'
    }, 404);
  }
});

action('removeAttachment', function() {
  var id, name;
  name = params.name;
  if (this.doc.binary && this.doc.binary[name]) {
    id = this.doc.binary[name].id;
    delete this.doc.binary[name];
    if (this.doc.binary.length === 0) {
      delete this.doc.binary;
    }
    return db.save(this.doc, function(err, res) {
      return db.get(id, function(err, binary) {
        return db.remove(binary.id, binary.rev, function(err, res) {
          if (err && (err.error = "not_found")) {
            return send({
              error: err.error
            }, 404);
          } else if (err) {
            console.log("[Attachment] err: " + JSON.stringify(err));
            return send({
              error: err.error
            }, 500);
          } else {
            return send({
              success: true,
              msg: 'deleted'
            }, 204);
          }
        });
      });
    });
  } else {
    return send({
      error: 'not_found'
    }, 404);
  }
});
