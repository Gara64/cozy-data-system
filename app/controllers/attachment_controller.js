// Generated by CoffeeScript 1.6.2
var checkPermissions, db, deleteFiles, fs;

load('application');

fs = require("fs");

db = require('./helpers/db_connect_helper').db_connect();

checkPermissions = require('./lib/token').checkDocType;

deleteFiles = function(req, callback) {
  var file, i, key, lasterr, _ref;

  i = 0;
  lasterr = null;
  _ref = req.files;
  for (key in _ref) {
    file = _ref[key];
    i++;
    fs.unlink(file.path, function(err) {
      i--;
      if (lasterr == null) {
        lasterr = err;
      }
      if (i === 0) {
        if (lasterr) {
          console.log(lasterr);
        }
        return callback(lasterr);
      }
    });
  }
  if (i === 0) {
    return callback();
  }
};

before('permissions', function() {
  var auth,
    _this = this;

  auth = req.header('authorization');
  return checkPermissions(auth, "attachments", function(err, appName, isAuthorized) {
    compound.app.feed.publish('usage.application', appName);
    return next();
  });
}, {
  only: ['addAttachment', 'getAttachment', 'removeAttachment']
});

before('lock request', function() {
  var _this = this;

  this.lock = "" + params.id;
  return app.locker.runIfUnlock(this.lock, function() {
    app.locker.addLock(_this.lock);
    return next();
  });
}, {
  only: ['addAttachment', 'removeAttachment']
});

after('unlock request', function() {
  return app.locker.removeLock(this.lock);
}, {
  only: ['addAttachment', 'removeAttachment']
});

before('get doc', function() {
  var _this = this;

  return db.get(params.id, function(err, doc) {
    if (err && err.error === "not_found") {
      app.locker.removeLock(_this.lock);
      return deleteFiles(req, function() {
        return send(404);
      });
    } else if (err) {
      console.log("[Attachment] err: " + JSON.stringify(err));
      app.locker.removeLock(_this.lock);
      return deleteFiles(req, function() {
        return send(500);
      });
    } else if (doc != null) {
      _this.doc = doc;
      return next();
    } else {
      app.locker.removeLock(_this.lock);
      return deleteFiles(req, function() {
        return send(404);
      });
    }
  });
});

action('addAttachment', function() {
  var file, fileData, name, stream;

  if (req.files["file"] != null) {
    file = req.files["file"];
    if (body.name != null) {
      name = body.name;
    } else {
      name = file.name;
    }
    fileData = {
      name: name,
      "content-type": file.type
    };
    stream = db.saveAttachment(this.doc, fileData, function(err, res) {
      if (err) {
        console.log("[Attachment] err: " + JSON.stringify(err));
        return deleteFiles(req, function() {
          return send(500);
        });
      } else {
        return deleteFiles(req, function() {
          return send(201);
        });
      }
    });
    return fs.createReadStream(file.path).pipe(stream);
  } else {
    console.log("no doc for attachment");
    return send({
      error: true,
      msg: "No file send"
    }, 400);
  }
});

action('getAttachment', function() {
  var name, stream;

  name = params.name;
  stream = db.getAttachment(this.doc.id, name, function(err) {
    if (err && (err.error = "not_found")) {
      return send(404);
    } else if (err) {
      return send(500);
    } else {
      return send(200);
    }
  });
  if (req.headers['range'] != null) {
    stream.setHeader('range', req.headers['range']);
  }
  stream.pipe(res);
  return res.on('close', function() {
    return stream.abort();
  });
});

action('removeAttachment', function() {
  var name;

  name = params.name;
  return db.removeAttachment(this.doc, name, function(err, res) {
    if (err && (err.error = "not_found")) {
      return send(404);
    } else if (err) {
      console.log("[Attachment] err: " + JSON.stringify(err));
      return send(500);
    } else {
      return send(204);
    }
  });
});
