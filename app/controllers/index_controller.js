// Generated by CoffeeScript 1.6.2
var Client, checkDocType, client, db, permission;

load('application');

Client = require("request-json").JsonClient;

if (process.env.NODE_ENV === "test") {
  client = new Client("http://localhost:9092/");
} else {
  client = new Client("http://localhost:9102/");
}

db = require('./helpers/db_connect_helper').db_connect();

checkDocType = require('./lib/token').checkDocType;

before('permission', function() {
  var auth,
    _this = this;

  auth = req.header('authorization');
  return checkDocType(auth, params.type, function(err, appName, isAuthorized) {
    if (!appName) {
      err = new Error("Application is not authenticated");
      return send({
        error: err
      }, 401);
    } else if (!isAuthorized) {
      err = new Error("Application is not authorized");
      return send({
        error: err
      }, 403);
    } else {
      compound.app.feed.publish('usage.application', appName);
      return next();
    }
  });
}, {
  only: ['search']
});

before('permission', function() {
  var auth,
    _this = this;

  auth = req.header('authorization');
  return checkDocType(auth, "all", function(err, appName, isAuthorized) {
    if (!appName) {
      err = new Error("Application is not authenticated");
      return send({
        error: err
      }, 401);
    } else if (!isAuthorized) {
      err = new Error("Application is not authorized");
      return send({
        error: err
      }, 403);
    } else {
      compound.app.feed.publish('usage.application', appName);
      return next();
    }
  });
}, {
  only: ['removeAll']
});

before('lock request', function() {
  var _this = this;

  this.lock = "" + params.id;
  return app.locker.runIfUnlock(this.lock, function() {
    app.locker.addLock(_this.lock);
    return next();
  });
}, {
  only: ['index', 'remove']
});

after('unlock request', function() {
  return app.locker.removeLock(this.lock);
}, {
  only: ['index', 'remove']
});

permission = function(docType, callback) {
  var auth,
    _this = this;

  auth = req.header('authorization');
  return checkDocType(auth, docType, function(err, appName, isAuthorized) {
    compound.app.feed.publish('usage.application', appName);
    return callback();
  });
};

action('index', function() {
  var indexDoc,
    _this = this;

  indexDoc = function(doc) {
    var data;

    doc["id"] = doc._id;
    data = {
      doc: doc,
      fields: body.fields
    };
    return client.post("index/", data, function(err, res, resbody) {
      if (err || res.statusCode !== 200) {
        return send({
          error: JSON.stringify(err, 500)
        });
      } else {
        return send({
          success: true
        }, 200);
      }
    }, false);
  };
  return db.get(params.id, function(err, doc) {
    var _this = this;

    if (doc != null) {
      return permission(doc.docType, function() {
        return indexDoc(doc);
      });
    } else {
      return send({
        error: "not found"
      }, 404);
    }
  });
});

action('search', function() {
  var data;

  data = {
    docType: params.type,
    query: body.query
  };
  return client.post("search/", data, function(err, res, resbody) {
    if (err) {
      return send({
        error: err.message
      }, 500);
    } else if (res == null) {
      return send({
        error: err.message
      }, 500);
    } else if (res.statusCode !== 200) {
      return send(resbody, res.statusCode);
    } else {
      return db.get(resbody.ids, function(err, docs) {
        var doc, resDoc, results, _i, _len;

        if (err) {
          return send({
            error: err.message
          }, 500);
        } else {
          results = [];
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            doc = docs[_i];
            if (doc.doc != null) {
              resDoc = doc.doc;
              resDoc.id = doc.id;
              results.push(resDoc);
            }
          }
          return send({
            rows: results
          }, 200);
        }
      });
    }
  });
});

action('remove', function() {
  var removeIndex;

  removeIndex = function() {
    return client.del("index/" + params.id + "/", function(err, res, resbody) {
      if (err != null) {
        return send({
          error: err.message
        }, 500);
      } else {
        return send({
          success: true
        }, 200);
      }
    }, false);
  };
  return db.get(params.id, function(err, doc) {
    return permission(doc.docType, function() {
      if (doc != null) {
        return permission(doc.docType, function() {
          return removeIndex(doc);
        });
      } else {
        return send({
          err: "not found"
        }, 404);
      }
    });
  });
});

action('removeAll', function() {
  return client.del("clear-all/", function(err, res, resbody) {
    if (err) {
      return send({
        error: err.message
      }, 500);
    } else {
      return send({
        success: true
      }, 200);
    }
  }, false);
});
