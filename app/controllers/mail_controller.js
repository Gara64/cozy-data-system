// Generated by CoffeeScript 1.7.1
var User, checkBody, checkDocType, nodemailer, sendEmail, user;

User = require('./lib/user');

user = new User();

nodemailer = require("nodemailer");

checkDocType = require('./lib/token').checkDocType;

before('permissionSendMail', function() {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, "send mail", (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return send({
          error: err
        }, 401);
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return send({
          error: err
        }, 403);
      } else {
        compound.app.feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
}, {
  only: ['sendMail']
});

before('permissionSendMail', function() {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, "send mail to user", (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return send({
          error: err
        }, 401);
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return send({
          error: err
        }, 403);
      } else {
        compound.app.feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
}, {
  only: ['sendMailToUser']
});

before('permissionSendMail', function() {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, "send mail from user", (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return send({
          error: err
        }, 401);
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return send({
          error: err
        }, 403);
      } else {
        compound.app.feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
}, {
  only: ['sendMailFromUser']
});

sendEmail = (function(_this) {
  return function(mailOptions, callback) {
    var transport;
    transport = nodemailer.createTransport("SMTP", {});
    return transport.sendMail(mailOptions, function(error, response) {
      transport.close();
      return callback(error, response);
    });
  };
})(this);

checkBody = (function(_this) {
  return function(attributes) {
    var attr, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = attributes.length; _i < _len; _i++) {
      attr = attributes[_i];
      if (body[attr] == null) {
        _results.push(send({
          error: "Body has not all necessary attributes"
        }, 400));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
})(this);

action('sendMail', (function(_this) {
  return function() {
    var mailOptions;
    checkBody(['to', 'from', 'subject', 'content']);
    mailOptions = {
      to: body.to,
      from: body.from,
      subject: body.subject,
      text: body.content,
      html: body.html || void 0
    };
    if (body.attachments != null) {
      mailOptions.attachments = body.attachments;
    }
    return sendEmail(mailOptions, function(error, response) {
      if (error) {
        console.log("[sendMail] Error : " + error);
        return send({
          error: error
        }, 500);
      } else {
        return send(response, 200);
      }
    });
  };
})(this));

action('sendMailToUser', (function(_this) {
  return function() {
    checkBody(['from', 'subject', 'content']);
    return user.getUser(function(err, user) {
      var mailOptions;
      if (err) {
        console.log("[sendMailToUser] err: " + err);
        return send(500);
      } else {
        mailOptions = {
          to: user.email,
          from: body.from,
          subject: body.subject,
          text: body.content,
          html: body.html || void 0
        };
        if (body.attachments != null) {
          mailOptions.attachments = body.attachments;
        }
        return sendEmail(mailOptions, (function(_this) {
          return function(error, response) {
            if (error) {
              console.log("[sendMail] Error : " + error);
              return send({
                error: error
              }, 500);
            } else {
              return send(response, 200);
            }
          };
        })(this));
      }
    });
  };
})(this));

action('sendMailFromUser', (function(_this) {
  return function() {
    checkBody(['to', 'subject', 'content']);
    return user.getUser(function(err, user) {
      var mailOptions;
      if (err) {
        console.log("[sendMailFromUser] err: " + err);
        return send(500);
      } else {
        mailOptions = {
          to: body.to,
          from: user.email,
          subject: body.subject,
          text: body.content,
          html: body.html || void 0
        };
        if (body.attachments != null) {
          mailOptions.attachments = body.attachments;
        }
        return sendEmail(mailOptions, (function(_this) {
          return function(error, response) {
            if (error) {
              console.log("[sendMail] Error : " + error);
              return send({
                error: error
              }, 500);
            } else {
              return send(response, 200);
            }
          };
        })(this));
      }
    });
  };
})(this));
