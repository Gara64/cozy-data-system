// Generated by CoffeeScript 1.7.1
var async, checkDocType, db, encryption, feed, locker, request;

async = require("async");

db = require('../helpers/db_connect_helper').db_connect();

feed = require('../helpers/db_feed_helper');

locker = require('../lib/locker');

request = require('../lib/request');

encryption = require('../lib/encryption');

checkDocType = require('../lib/token').checkDocType;

module.exports.permissions = function(req, res, next) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, req.params.type, (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return res.send(401, {
          error: err
        });
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return res.send(403, {
          error: err
        });
      } else {
        req.appName = appName;
        feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
};

module.exports.lockRequest = function(req, res, next) {
  req.lock = "" + req.params.type;
  return locker.runIfUnlock(req.lock, (function(_this) {
    return function() {
      locker.addLock(req.lock);
      return next();
    };
  })(this));
};

module.exports.unlockRequest = function(req, res) {
  return locker.removeLock(req.lock);
};

module.exports.doctypes = function(req, res) {
  var out, query;
  query = {
    group: true
  };
  out = [];
  return db.view("doctypes/all", query, function(err, docs) {
    if (err != null) {
      return res.send(500, {
        err: JSON.stringify(err)
      });
    } else {
      docs.forEach(function(key, row, id) {
        return out.push(key);
      });
      return res.send(200, out);
    }
  });
};

module.exports.tags = function(req, res) {
  var out, query;
  query = {
    group: true
  };
  out = [];
  return db.view("tags/all", query, function(err, docs) {
    if (err != null) {
      return send(500, {
        error: JSON.stringify(err)
      });
    } else {
      docs.forEach(function(key, row, id) {
        return out.push(key);
      });
      return res.send(200, out);
    }
  });
};

module.exports.results = function(req, res) {
  return request.get(req.appName, req.params, (function(_this) {
    return function(path) {
      return db.view(("" + req.params.type + "/") + path, req.body, function(err, docs) {
        if (err != null) {
          if (err.error === "not_found") {
            return res.send(404, {
              error: "not found"
            });
          } else {
            console.log("[Results] err: " + JSON.stringify(err));
            return res.send(500, {
              error: err.message
            });
          }
        } else {
          docs.forEach(function(value) {
            delete value._rev;
            if ((value.password != null) && !((value.docType != null) && (value.docType.toLowerCase() === "application" || value.docType.toLowerCase() === "user"))) {
              return encryption.decrypt(value.password, function(err, password) {
                if (err == null) {
                  return value.password = password;
                }
              });
            }
          });
          return res.send(docs);
        }
      });
    };
  })(this));
};

module.exports.removeResults = function(req, res) {
  var delFunc, removeAllDocs, removeFunc;
  removeFunc = function(doc, callback) {
    return db.remove(doc.value._id, doc.value._rev, callback);
  };
  removeAllDocs = function(docs) {
    return async.forEachSeries(docs, removeFunc, function(err) {
      if (err != null) {
        return res.send(500, {
          error: err.message
        });
      } else {
        return delFunc();
      }
    });
  };
  delFunc = (function(_this) {
    return function() {
      var query;
      query = JSON.parse(JSON.stringify(req.body));
      return request.get(req.appName, req.params, function(path) {
        path = ("" + req.params.type + "/") + path;
        return db.view(path, query, function(err, docs) {
          if (err != null) {
            return res.send(404, {
              error: "not found"
            });
          } else {
            if (docs.length > 0) {
              return removeAllDocs(docs);
            } else {
              return res.send(204, {
                success: true
              });
            }
          }
        });
      });
    };
  })(this);
  return delFunc();
};

module.exports.definition = function(req, res, next) {
  return db.get("_design/" + req.params.type, (function(_this) {
    return function(err, docs) {
      var design_doc, views;
      if ((err != null) && err.error === 'not_found') {
        design_doc = {};
        design_doc[req.params.req_name] = req.body;
        return db.save("_design/" + req.params.type, design_doc, function(err, response) {
          next();
          if (err) {
            console.log("[Definition] err: " + JSON.stringify(err));
            return res.send(500, {
              error: err.message
            });
          } else {
            return res.send(200, {
              success: true
            });
          }
        });
      } else if (err != null) {
        next();
        return res.send(500, {
          error: err.message
        });
      } else {
        views = docs.views;
        return request.create(req.appName, req.params, views, req.body, function(err, path) {
          views[path] = req.body;
          return db.merge("_design/" + req.params.type, {
            views: views
          }, function(err, response) {
            next();
            if (err != null) {
              console.log("[Definition] err: " + JSON.stringify(err));
              return res.send(500, {
                error: err.message
              });
            } else {
              return res.send(200, {
                success: true
              });
            }
          });
        });
      }
    };
  })(this));
};

module.exports.remove = function(req, res, next) {
  return db.get("_design/" + req.params.type, (function(_this) {
    return function(err, docs) {
      var views;
      if ((err != null) && err.error === 'not_found') {
        next();
        return res.send(404, {
          error: "not found"
        });
      } else if (err != null) {
        next();
        return res.send(500, {
          error: err.message
        });
      } else {
        views = docs.views;
        return request.get(req.appName, req.params, function(path) {
          if (path === ("" + req.params.req_name)) {
            next();
            return res.send(204, {
              success: true
            });
          } else {
            delete views["" + path];
            return db.merge("_design/" + req.params.type, {
              views: views
            }, function(err, response) {
              next();
              if (err != null) {
                console.log("[Definition] err: " + JSON.stringify(err));
                return res.send(500, {
                  error: err.message
                });
              } else {
                return res.send(204, {
                  success: true
                });
              }
            });
          }
        });
      }
    };
  })(this));
};
