// Generated by CoffeeScript 1.7.1
var async, db, encryption, request;

async = require("async");

db = require('../helpers/db_connect_helper').db_connect();

request = require('../lib/request');

encryption = require('../lib/encryption');

module.exports.doctypes = function(req, res, next) {
  var out, query;
  query = {
    group: true
  };
  out = [];
  return db.view("doctypes/all", query, function(err, docs) {
    if (err != null) {
      return next(new Error(err));
    } else {
      docs.forEach(function(key, row, id) {
        return out.push(key);
      });
      return res.send(200, out);
    }
  });
};

module.exports.tags = function(req, res, next) {
  var out, query;
  query = {
    group: true
  };
  out = [];
  return db.view("tags/all", query, function(err, docs) {
    if (err != null) {
      return next(new Error(err));
    } else {
      docs.forEach(function(key, row, id) {
        return out.push(key);
      });
      return res.send(200, out);
    }
  });
};

module.exports.results = function(req, res, next) {
  return request.get(req.appName, req.params, function(path) {
    return db.view(("" + req.params.type + "/") + path, req.body, function(err, docs) {
      if (err != null) {
        if (err.error === "not_found") {
          err = new Error("not found");
          err.status = 404;
          return next(err);
        } else {
          console.log("[Results] err: " + JSON.stringify(err));
          return next(new Error(err.error));
        }
      } else {
        docs.forEach(function(value) {
          var error, password;
          delete value._rev;
          if ((value.password != null) && !((value.docType != null) && (value.docType.toLowerCase() === "application" || value.docType.toLowerCase() === "user"))) {
            try {
              password = encryption.decrypt(value.password);
            } catch (_error) {
              error = _error;
              next(error);
            }
            if (err == null) {
              return value.password = password;
            }
          }
        });
        return res.send(docs);
      }
    });
  });
};

module.exports.removeResults = function(req, res, next) {
  var delFunc, removeAllDocs, removeFunc;
  removeFunc = function(doc, callback) {
    return db.remove(doc.value._id, doc.value._rev, callback);
  };
  removeAllDocs = function(docs) {
    return async.forEachSeries(docs, removeFunc, function(err) {
      if (err != null) {
        return next(new Error(err));
      } else {
        return delFunc();
      }
    });
  };
  delFunc = function() {
    var query;
    query = JSON.parse(JSON.stringify(req.body));
    return request.get(req.appName, req.params, function(path) {
      path = ("" + req.params.type + "/") + path;
      return db.view(path, query, function(err, docs) {
        if (err != null) {
          err = new Error("not found");
          err.status = 404;
          return next(err);
        } else {
          if (docs.length > 0) {
            return removeAllDocs(docs);
          } else {
            return res.send(204, {
              success: true
            });
          }
        }
      });
    });
  };
  return delFunc();
};

module.exports.definition = function(req, res, next) {
  return db.get("_design/" + req.params.type, function(err, docs) {
    var design_doc, views;
    if ((err != null) && err.error === 'not_found') {
      design_doc = {};
      design_doc[req.params.req_name] = req.body;
      return db.save("_design/" + req.params.type, design_doc, function(err, response) {
        if (err) {
          console.log("[Definition] err: " + JSON.stringify(err));
          return next(new Error(err.error));
        } else {
          res.send(200, {
            success: true
          });
          return next();
        }
      });
    } else if (err != null) {
      next(new Error(err.error));
      return next();
    } else {
      views = docs.views;
      return request.create(req.appName, req.params, views, req.body, function(err, path) {
        views[path] = req.body;
        return db.merge("_design/" + req.params.type, {
          views: views
        }, function(err, response) {
          if (err != null) {
            console.log("[Definition] err: " + JSON.stringify(err));
            return next(new Error(err.error));
          } else {
            res.send(200, {
              success: true
            });
            return next();
          }
        });
      });
    }
  });
};

module.exports.remove = function(req, res, next) {
  return db.get("_design/" + req.params.type, function(err, docs) {
    var views;
    if ((err != null) && err.error === 'not_found') {
      err = new Error("not found");
      err.status = 404;
      return next(err);
    } else if (err != null) {
      return next(new Error(err.error));
    } else {
      views = docs.views;
      return request.get(req.appName, req.params, function(path) {
        if (path === ("" + req.params.req_name)) {
          res.send(204, {
            success: true
          });
          return next();
        } else {
          delete views["" + path];
          return db.merge("_design/" + req.params.type, {
            views: views
          }, function(err, response) {
            if (err != null) {
              console.log("[Definition] err: " + err.message);
              return next(new Error(err.error));
            } else {
              res.send(204, {
                success: true
              });
              return next();
            }
          });
        }
      });
    }
  });
};
