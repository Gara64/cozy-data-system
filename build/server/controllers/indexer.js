// Generated by CoffeeScript 1.7.1
var Client, checkDocType, client, db, feed, locker, permission;

Client = require("request-json").JsonClient;

if (process.env.NODE_ENV === "test") {
  client = new Client("http://localhost:9092/");
} else {
  client = new Client("http://localhost:9102/");
}

db = require('../helpers/db_connect_helper').db_connect();

checkDocType = require('../lib/token').checkDocType;

feed = require('../helpers/db_feed_helper');

locker = require('../lib/locker');

module.exports.permissionType = function(req, res, next) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, req.params.type, (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return res.send(401, {
          error: err
        });
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return res.send(403, {
          error: err
        });
      } else {
        feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
};

module.exports.permissionAll = function(req, res, next) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, "all", (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return send(401, {
          error: err
        });
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return send(403, {
          error: err
        });
      } else {
        feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
};

module.exports.lockRequest = function(req, res, next) {
  req.lock = "" + req.params.id;
  return locker.runIfUnlock(req.lock, function() {
    locker.addLock(req.lock);
    return next();
  });
};

module.exports.unlockRequest = function(req, res) {
  return locker.removeLock(req.lock);
};

permission = function(req, docType, callback) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, docType, (function(_this) {
    return function(err, appName, isAuthorized) {
      feed.publish('usage.application', appName);
      return callback();
    };
  })(this));
};

module.exports.index = function(req, res, next) {
  var indexDoc;
  indexDoc = (function(_this) {
    return function(doc) {
      var data;
      doc["id"] = doc._id;
      data = {
        doc: doc,
        fields: req.body.fields
      };
      return client.post("index/", data, function(err, response, body) {
        next();
        if (err || res.statusCode !== 200) {
          return res.send(500, {
            error: JSON.stringify(err)
          });
        } else {
          return res.send(200, {
            success: true
          });
        }
      }, false);
    };
  })(this);
  return db.get(req.params.id, function(err, doc) {
    if (doc != null) {
      return permission(req, doc.docType, function() {
        return indexDoc(doc);
      });
    } else {
      next();
      return res.send(404, {
        error: "not found"
      });
    }
  });
};

module.exports.search = function(req, res) {
  var data;
  data = {
    docType: req.params.type,
    query: req.body.query
  };
  return client.post("search/", data, function(err, response, body) {
    if (err) {
      return res.send(500, {
        error: err.message
      });
    } else if (response == null) {
      return res.send(500, {
        error: err.message
      });
    } else if (response.statusCode !== 200) {
      console.log(response.statusCode, body);
      return res.send(response.statusCode, body);
    } else {
      return db.get(body.ids, function(err, docs) {
        var doc, resDoc, results, _i, _len;
        if (err) {
          return res.send(500, {
            error: err.message
          });
        } else {
          results = [];
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            doc = docs[_i];
            if (doc.doc != null) {
              resDoc = doc.doc;
              resDoc.id = doc.id;
              results.push(resDoc);
            }
          }
          return res.send(200, {
            rows: results
          });
        }
      });
    }
  });
};

module.exports.remove = function(req, res, next) {
  var removeIndex;
  removeIndex = function() {
    return client.del("index/" + params.id + "/", function(err, response, body) {
      next();
      if (err != null) {
        return res.send(500, {
          error: err.message
        });
      } else {
        return res.send(200, {
          success: true
        });
      }
    }, false);
  };
  return db.get(req.params.id, function(err, doc) {
    return permission(req, doc.docType, function() {
      if (doc != null) {
        return permission(req, doc.docType, function() {
          return removeIndex(doc);
        });
      } else {
        next();
        return res.send(404, {
          err: "not found"
        });
      }
    });
  });
};

module.exports.removeAll = function(req, res) {
  return client.del("clear-all/", function(err, response, body) {
    if (err) {
      return res.send(500, {
        error: err.message
      });
    } else {
      return res.send(200, {
        success: true
      });
    }
  }, false);
};
