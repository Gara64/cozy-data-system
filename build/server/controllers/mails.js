// Generated by CoffeeScript 1.7.1
var User, checkBody, checkDocType, feed, nodemailer, sendEmail, user;

nodemailer = require("nodemailer");

feed = require('../helpers/db_feed_helper');

checkDocType = require('../lib/token').checkDocType;

User = require('../lib/user');

user = new User();

module.exports.permissionSendMail = function(req, res, next) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, "send mail", (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return res.send(401, {
          error: err
        });
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return res.send(403, {
          error: err
        });
      } else {
        feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
};

module.exports.permissionSendMailToUser = function(req, res, next) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, "send mail to user", (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return res.send(401, {
          error: err
        });
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return res.send(403, {
          error: err
        });
      } else {
        feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
};

module.exports.permissionSendMailFromUser = function(req, res, next) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, "send mail from user", (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return res.send(401, {
          error: err
        });
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return res.send(403, {
          error: err
        });
      } else {
        feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
};

sendEmail = (function(_this) {
  return function(mailOptions, callback) {
    var transport;
    transport = nodemailer.createTransport("SMTP", {});
    return transport.sendMail(mailOptions, function(error, response) {
      transport.close();
      return callback(error, response);
    });
  };
})(this);

checkBody = (function(_this) {
  return function(res, body, attributes) {
    var attr, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = attributes.length; _i < _len; _i++) {
      attr = attributes[_i];
      if (body[attr] == null) {
        _results.push(res.send(400, {
          error: "Body has not all necessary attributes"
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
})(this);

module.exports.send = function(req, res) {
  var body, mailOptions;
  body = req.body;
  checkBody(res, body, ['to', 'from', 'subject', 'content']);
  mailOptions = {
    to: body.to,
    from: body.from,
    subject: body.subject,
    text: body.content,
    html: body.html || void 0
  };
  if (body.attachments != null) {
    mailOptions.attachments = body.attachments;
  }
  return sendEmail(mailOptions, function(error, response) {
    if (error) {
      console.log("[sendMail] Error : " + error);
      return res.send(500, {
        error: error
      });
    } else {
      return res.send(200, response);
    }
  });
};

module.exports.sendToUser = function(req, res) {
  var body;
  body = req.body;
  checkBody(res, body, ['to', 'from', 'subject', 'content']);
  return user.getUser(function(err, user) {
    var mailOptions;
    if (err) {
      console.log("[sendMailToUser] err: " + err);
      return res.send(500, {
        error: err
      });
    } else {
      mailOptions = {
        to: user.email,
        from: body.from,
        subject: body.subject,
        text: body.content,
        html: body.html || void 0
      };
      if (body.attachments != null) {
        mailOptions.attachments = body.attachments;
      }
      return sendEmail(mailOptions, (function(_this) {
        return function(error, response) {
          if (error) {
            console.log("[sendMail] Error : " + error);
            return res.send(500, {
              error: error
            });
          } else {
            return res.send(200, response);
          }
        };
      })(this));
    }
  });
};

module.exports.sendFromUser = function(req, res) {
  var body;
  body = req.body;
  checkBody(res, body, ['to', 'from', 'subject', 'content']);
  return user.getUser(function(err, user) {
    var mailOptions;
    if (err) {
      console.log("[sendMailFromUser] err: " + err);
      return res.send(500, {
        error: err
      });
    } else {
      mailOptions = {
        to: body.to,
        from: user.email,
        subject: body.subject,
        text: body.content,
        html: body.html || void 0
      };
      if (body.attachments != null) {
        mailOptions.attachments = body.attachments;
      }
      return sendEmail(mailOptions, (function(_this) {
        return function(error, response) {
          if (error) {
            console.log("[sendMail] Error : " + error);
            return res.send(500, {
              error: error
            });
          } else {
            return res.send(200, response);
          }
        };
      })(this));
    }
  });
};
