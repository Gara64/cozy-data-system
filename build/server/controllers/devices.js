<<<<<<< HEAD
// Generated by CoffeeScript 1.9.0
var addAccess, async, db, dbHelper, errors, feed, randomString, removeAccess, request;
=======
// Generated by CoffeeScript 1.9.1
var async, createFilter, db, dbHelper, default_filter, errors, feed, randomString, request;
>>>>>>> upstream/development

async = require("async");

feed = require('../lib/feed');

db = require('../helpers/db_connect_helper').db_connect();

request = require('../lib/request');

dbHelper = require('../lib/db_remove_helper');

errors = require('../middlewares/errors');

addAccess = require('../lib/token').addDeviceAccess;

removeAccess = require('../lib/token').removeAccess;

randomString = function(length) {
  var string;
  string = "";
  while (string.length < length) {
    string = string + Math.random().toString(36).substr(2);
  }
  return string.substr(0, length);
};

module.exports.create = function(req, res, next) {
  var device, _ref;
  if (((_ref = req.body) != null ? _ref.login : void 0) == null) {
    return next(errors.http(400, "Name isn't defined in req.body.login"));
  }
  device = req.body;
  device.password = randomString(32);
  device.docType = "Device";
  return db.view('device/byLogin', {
    key: device.login
  }, function(err, response) {
    if (err) {
      return next(err);
    } else if (response.length !== 0) {
      return next(errors.http(400, "This name is already used"));
    } else {
      return addAccess(device, function(err, device) {
        if (err != null) {
          console.log(err);
        }
        return db.save(device, function(err, docInfo) {
          if (err) {
            return next(err);
          } else {
            device.id = docInfo._id;
            return res.send(200, device);
          }
        });
      });
    }
  });
};

module.exports.remove = function(req, res, next) {
  var id, send_success;
  send_success = function() {
    res.send(200, {
      success: true
    });
    return next();
  };
  id = req.params.id;
  return removeAccess(req.doc, (function(_this) {
    return function(err) {
      return db.remove("_design/" + id, function(err, response) {
        return dbHelper.remove(req.doc, function(err, response) {
          if (err) {
            console.log("[Definition] err: " + JSON.stringify(err));
            return next(err);
          } else {
            return send_success();
          }
        });
      });
    };
  })(this));
};
