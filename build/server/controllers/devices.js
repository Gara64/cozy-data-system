// Generated by CoffeeScript 1.7.1
var async, checkDocType, createFilter, db, feed, filter, locker, randomString, request;

async = require("async");

db = require('../helpers/db_connect_helper').db_connect();

checkDocType = require('../lib/token').checkDocType;

request = require('../lib/request');

filter = require('../lib/default_filter');

locker = require('../lib/locker');

feed = require('../helpers/db_feed_helper');

module.exports.permissions = function(req, res, next) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, "device", (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return res.send({
          error: err
        }, 401);
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return res.send({
          error: err
        }, 403);
      } else {
        _this.appName = appName;
        return next();
      }
    };
  })(this));
};

module.exports.lockRequest = function(req, res, next) {
  req.lock = "" + req.params.id;
  return locker.runIfUnlock(req.lock, function() {
    locker.addLock(req.lock);
    return next();
  });
};

module.exports.unlockRequest = function(req, res) {
  return locker.removeLock(req.lock);
};

module.exports.getDoc = function(req, res, next) {
  return db.get(req.params.id, function(err, doc) {
    if ((err != null) && err.error === "not_found") {
      locker.removeLock(req.lock);
      return res.send(404, {
        error: "not found"
      });
    } else if (err != null) {
      console.log("[Get doc] err: " + JSON.stringify(err));
      locker.removeLock(req.lock);
      return res.send(500, {
        error: err
      });
    } else if (doc != null) {
      req.doc = doc;
      return next();
    } else {
      locker.removeLock(req.lock);
      return res.send(404, {
        error: "not found"
      });
    }
  });
};

randomString = function(length) {
  var string;
  string = "";
  while (string.length < length) {
    string = string + Math.random().toString(36).substr(2);
  }
  return string.substr(0, length);
};

createFilter = function(id, callback) {
  return db.get("_design/" + id, (function(_this) {
    return function(err, res) {
      var designDoc, filterDocTypeFunction, filterFunction, filterName;
      if (err && err.error === 'not_found') {
        designDoc = {};
        filterFunction = filter.get(id);
        designDoc.filter = filterFunction;
        filterDocTypeFunction = filter.getDocType(id);
        designDoc.filterDocType = filterDocTypeFunction;
        return db.save("_design/" + id, {
          views: {},
          filters: designDoc
        }, function(err, res) {
          if (err) {
            console.log("[Definition] err: " + JSON.stringify(err));
            return callback(err.message);
          } else {
            return callback(null);
          }
        });
      } else if (err) {
        return callback(err.message);
      } else {
        designDoc = res.filters;
        filterName = id + "filter";
        filterFunction = filter.get(id);
        designDoc.filter = filterFunction;
        return db.merge("_design/" + id, {
          filters: designDoc
        }, function(err, res) {
          if (err) {
            console.log("[Definition] err: " + JSON.stringify(err));
            return callback(err.message);
          } else {
            return callback(null);
          }
        });
      }
    };
  })(this));
};

module.exports.create = function(req, res) {
  var device;
  device = {
    login: req.body.login,
    password: randomString(32),
    docType: "Device",
    configuration: {
      "File": "all",
      "Folder": "all"
    }
  };
  return db.view('device/byLogin', {
    key: device.login
  }, function(err, response) {
    if (err != null) {
      return res.send(500, {
        error: err
      });
    } else if (response.length !== 0) {
      return res.send(400, {
        error: "This name is already used"
      });
    } else {
      return db.save(device, (function(_this) {
        return function(err, docInfo) {
          return createFilter(docInfo._id, function(err) {
            if (err != null) {
              return res.send(500, {
                error: err
              });
            } else {
              device.id = docInfo._id;
              return res.send(200, device);
            }
          });
        };
      })(this));
    }
  });
};

module.exports.remove = function(req, res, next) {
  var id, send_success;
  send_success = function() {
    feed.feed.removeListener("deletion." + req.params.id, send_success);
    next();
    return res.send(200, {
      success: true
    });
  };
  id = req.params.id;
  return db.remove("_design/" + id, (function(_this) {
    return function(err, response) {
      if (err != null) {
        console.log("[Definition] err: " + JSON.stringify(err));
        next();
        return res.send(500, {
          error: err.message
        });
      } else {
        return db.remove(id, req.doc._rev, function(err, response) {
          if (err != null) {
            console.log("[Definition] err: " + JSON.stringify(err));
            next();
            return res.send(500, {
              error: err.message
            });
          } else {
            return feed.feed.on("deletion." + req.params.id, send_success);
          }
        });
      }
    };
  })(this));
};
