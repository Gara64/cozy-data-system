// Generated by CoffeeScript 1.7.1
var Account, Client, CryptoTools, User, accountManager, checkDocType, checkProxyHome, correctWitness, cryptoTools, db, encryption, feed, initPassword, randomString, user;

db = require('../helpers/db_connect_helper').db_connect();

feed = require('../helpers/db_feed_helper');

encryption = require('../lib/encryption');

Client = require("request-json").JsonClient;

Account = require('../lib/account');

CryptoTools = require('../lib/crypto_tools');

User = require('../lib/user');

randomString = require('../lib/random').randomString;

checkProxyHome = require('../lib/token').checkProxyHome;

checkDocType = require('../lib/token').checkDocType;

initPassword = require('../lib/init').initPassword;

accountManager = new Account();

cryptoTools = new CryptoTools();

user = new User();

correctWitness = "Encryption is correct";

module.exports.permission_keys = function(req, res, next) {
  return checkProxyHome(req.header('authorization'), function(err, isAuthorized) {
    if (!isAuthorized) {
      err = new Error("Application is not authorized");
      return res.send(403, {
        error: err
      });
    } else {
      return next();
    }
  });
};

module.exports.initializeKeys = function(req, res) {
  return user.getUser(function(err, user) {
    if (err) {
      console.log("[initializeKeys] err: " + err);
      return res.send(500, {
        error: err
      });
    } else {
      if ((user.salt != null) && (user.slaveKey != null)) {
        return encryption.logIn(req.body.password, user, function(err) {
          if (err != null) {
            res.send(500, {
              error: err
            });
          }
          return initPassword(function() {
            return res.send(200, {
              success: true
            });
          });
        });
      } else {
        return encryption.init(req.body.password, user, function(err) {
          if (err) {
            return res.send(500, {
              error: err
            });
          } else {
            return res.send(200, {
              success: true
            });
          }
        });
      }
    }
  });
};

module.exports.updateKeys = function(req, res) {
  if (req.body.password != null) {
    return user.getUser(function(err, user) {
      if (err) {
        console.log("[updateKeys] err: " + err);
        return res.send(500, {
          error: err
        });
      } else {
        return encryption.update(req.body.password, user, function(err) {
          if ((err != null) && err === 400) {
            return res.send(400, {
              error: err
            });
          } else if (err) {
            return res.send(500, {
              error: err
            });
          } else {
            return res.send(200, {
              success: true
            });
          }
        });
      }
    });
  } else {
    return res.send(400, "no password field in body");
  }
};

module.exports.resetKeys = function(req, res) {
  return user.getUser(function(err, user) {
    if (err) {
      console.log("[initializeKeys] err: " + err);
      return res.send(500, {
        error: err
      });
    } else {
      return encryption.reset(user, function(err) {
        if (err) {
          return send(500, {
            error: err
          });
        } else {
          return send(204, {
            success: true
          });
        }
      });
    }
  });
};

module.exports.deleteKeys = function(req, res) {
  return encryption.logOut(function(err) {
    if (err) {
      return res.send(500, {
        error: err
      });
    } else {
      return res.send(204, {
        sucess: true
      });
    }
  });
};
