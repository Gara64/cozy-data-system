// Generated by CoffeeScript 1.7.1
var Client, checkDocType, client, db, encryption, feed, git, locker, updatePermissions;

git = require('git-rev');

Client = require("request-json").JsonClient;

db = require('../helpers/db_connect_helper').db_connect();

feed = require('../helpers/db_feed_helper');

locker = require('../lib/locker');

encryption = require('../lib/encryption');

checkDocType = require('../lib/token').checkDocType;

updatePermissions = require('../lib/token').updatePermissions;

if (process.env.NODE_ENV === "test") {
  client = new Client("http://localhost:9092/");
} else {
  client = new Client("http://localhost:9102/");
}

module.exports.lockRequest = function(req, res, next) {
  req.lock = "" + req.params.id;
  return locker.runIfUnlock(req.lock, function() {
    locker.addLock(req.lock);
    return next();
  });
};

module.exports.unlockRequest = function(req, res) {
  return locker.removeLock(req.lock);
};

module.exports.getDoc = function(req, res, next) {
  return db.get(req.params.id, (function(_this) {
    return function(err, doc) {
      if ((err != null) && err.error === "not_found") {
        locker.removeLock(req.lock);
        return res.send(404, {
          error: "not found"
        });
      } else if (err != null) {
        console.log("[Get doc] err: " + JSON.stringify(err));
        locker.removeLock(req.lock);
        return res.send(500, {
          error: err
        });
      } else if (doc != null) {
        req.doc = doc;
        return next();
      } else {
        locker.removeLock(req.lock);
        return res.send(404, {
          error: "not found"
        });
      }
    };
  })(this));
};

module.exports.permissions_param = function(req, res, next) {
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, req.body.docType, (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return res.send(401, {
          error: err.message
        });
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return res.send(403, {
          error: err.message
        });
      } else {
        feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
};

module.exports.permissions = function(req, res, next) {

  /*
  doctypeName = req.doc?.docType or req.body?.docType or null
  if req.doc?.docType? and req.body?.docType? \
     and req.doc.docType is req.body.docType
     res.send 500, "A document's doctype cannot change"
  else
   */
  var auth;
  auth = req.header('authorization');
  return checkDocType(auth, req.doc.docType, (function(_this) {
    return function(err, appName, isAuthorized) {
      if (!appName) {
        err = new Error("Application is not authenticated");
        return res.send(401, {
          error: err.message
        });
      } else if (!isAuthorized) {
        err = new Error("Application is not authorized");
        return res.send(403, {
          error: err.message
        });
      } else {
        feed.publish('usage.application', appName);
        return next();
      }
    };
  })(this));
};

module.exports.encryptPassword = function(req, res, next) {
  var doctype;
  doctype = req.body.docType;
  if ((doctype == null) || doctype.toLowerCase() !== "application") {
    return encryption.encrypt(req.body.password, function(err, password) {
      if (err != null) {
        return res.send(500, {
          error: err
        });
      } else if (password != null) {
        req.body.password = password;
        return next();
      } else {
        return next();
      }
    });
  } else {
    return next();
  }
};

module.exports.encryptPassword2 = function(req, res, next) {
  var doctypeBody, doctypeDoc;
  doctypeBody = req.body.docType;
  doctypeDoc = req.doc.docType;
  if ((doctypeBody == null) || doctypeBody.toLowerCase() !== "application") {
    if ((doctypeDoc == null) || doctypeDoc.toLowerCase() !== "application") {
      return encryption.encrypt(req.body.password, function(err, password) {
        if (err != null) {
          return send(500, {
            error: err
          });
        } else if (password != null) {
          req.body.password = password;
          return next();
        } else {
          return next();
        }
      });
    } else {
      return next();
    }
  } else {
    return next();
  }
};

module.exports.decryptPassword = function(req, res, next) {
  var doctype;
  doctype = req.doc.docType;
  if ((doctype == null) || doctype.toLowerCase() !== "application") {
    return encryption.decrypt(req.doc.password, (function(_this) {
      return function(err, password) {
        if (err != null) {
          return res.send(500, {
            error: err
          });
        } else if (password != null) {
          req.doc.password = password;
          return next();
        } else {
          return next();
        }
      };
    })(this));
  } else {
    return next();
  }
};

module.exports.index = function(req, res) {
  return git.long(function(commit) {
    return git.branch(function(branch) {
      return git.tag(function(tag) {
        return res.send(200, "<strong>Cozy Data System</strong><br />\nrevision: " + commit + "  <br />\ntag: " + tag + " <br />\nbranch: " + branch + " <br />");
      });
    });
  });
};

module.exports.exist = function(req, res) {
  return db.head(req.params.id, function(err, response, status) {
    if (status === 200) {
      return res.send(200, {
        exist: true
      });
    } else if (status === 404) {
      return res.send(200, {
        exist: false
      });
    } else {
      return res.send(500, {
        error: JSON.stringify(err)
      });
    }
  });
};

module.exports.find = function(req, res) {
  delete req.doc._rev;
  return res.send(200, req.doc);
};

module.exports.create = function(req, res) {
  var doctype;
  delete req.body._attachments;
  doctype = req.body.docType;
  if ((doctype != null) && doctype.toLowerCase() === "application") {
    updatePermissions(req.body);
  }
  if (req.params.id != null) {
    return db.get(req.params.id, function(err, doc) {
      if (doc != null) {
        return res.send(409, {
          error: "The document already exists"
        });
      } else {
        return db.save(req.params.id, req.body, function(err, doc) {
          if (err != null) {
            return res.send(409, {
              error: err.message
            });
          } else {
            return res.send(201, {
              "_id": doc.id
            });
          }
        });
      }
    });
  } else {
    return db.save(req.body, function(err, doc) {
      if (err != null) {
        return res.send(500, {
          error: err.message
        });
      } else {
        return res.send(201, {
          "_id": doc.id
        });
      }
    });
  }
};

module.exports.update = function(req, res, next) {
  var doctype;
  delete req.body._attachments;
  doctype = req.body.docType;
  if ((doctype != null) && doctype.toLowerCase() === "application") {
    updatePermissions(req.body);
  }
  return db.save(req.params.id, req.body, function(err, response) {
    next();
    if (err != null) {
      return res.send(500, {
        error: err.message
      });
    } else {
      return res.send(200, {
        success: true
      });
    }
  });
};

module.exports.upsert = function(req, res, next) {
  delete req.body._attachments;
  return db.get(req.params.id, function(err, doc) {
    return db.save(req.params.id, req.body, function(err, savedDoc) {
      next();
      if (err != null) {
        return res.send(500, {
          error: err.message
        });
      } else if (doc != null) {
        return res.send(200, {
          success: true
        });
      } else {
        return res.send(201, {
          "_id": savedDoc.id
        });
      }
    });
  });
};

module.exports["delete"] = function(req, res, next) {
  var id, send_success;
  id = req.params.id;
  send_success = function() {
    next();
    feed.feed.removeListener("deletion." + id, send_success);
    return res.send(204, {
      success: true
    });
  };
  return db.remove(id, req.doc.rev, (function(_this) {
    return function(err, res) {
      if (err != null) {
        next();
        return res.send(500, {
          error: err.message
        });
      } else {
        return client.del("index/" + id + "/", function(err, response, resbody) {
          return feed.feed.on("deletion." + id, send_success);
        });
      }
    };
  })(this));
};

module.exports.merge = function(req, res, next) {
  delete req.body._attachments;
  return db.merge(req.params.id, req.body, function(err, doc) {
    next();
    if (err != null) {
      return res.send(500, {
        error: err.message
      });
    } else {
      return res.send(200, {
        success: true
      });
    }
  });
};
