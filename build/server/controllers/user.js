// Generated by CoffeeScript 1.7.1
var checkDocType, db, keys, locker;

db = require('../helpers/db_connect_helper').db_connect();

locker = require('../lib/locker');

keys = require('../lib/encryption');

checkDocType = require('../lib/token').checkDocType;

module.exports.permissions_add = function(req, res, next) {
  return checkDocType(req.header('authorization'), "User", (function(_this) {
    return function(err, isAuthenticated, isAuthorized) {
      return next();
    };
  })(this));
};

module.exports.lockRequest = function(req, res, next) {
  req.lock = "" + req.params.id;
  return locker.runIfUnlock(req.lock, function() {
    locker.addLock(req.lock);
    return next();
  });
};

module.exports.unlockRequest = function(req, res, next) {
  return locker.removeLock(req.lock);
};

module.exports.getDoc = function(req, res, next) {
  return db.get(params.id, (function(_this) {
    return function(err, doc) {
      if (err && err.error === "not_found") {
        locker.removeLock(req.lock);
        return res.send(404, {
          error: "not found"
        });
      } else if (err) {
        console.log("[Get doc] err: " + JSON.stringify(err));
        locker.removeLock(req.lock);
        return res.send(500, {
          error: err
        });
      } else if (doc != null) {
        req.doc = doc;
        return next();
      } else {
        locker.removeLock(req.lock);
        return res.send(404, {
          error: "not found"
        });
      }
    };
  })(this));
};

module.exports.permissions = function(req, res, next) {
  return checkDocType(req.header('authorization'), req.doc.docType, (function(_this) {
    return function(err, isAuthenticated, isAuthorized) {
      return next();
    };
  })(this));
};

module.exports.create = function(req, res) {
  delete body._attachments;
  if (req.params.id) {
    return db.get(req.params.id, function(err, doc) {
      if (doc) {
        return res.send(409, {
          error: "The document exists"
        });
      } else {
        return db.save(params.id, req.body, function(err, response) {
          if (err) {
            return res.send(409, {
              error: err.message
            });
          } else {
            return res.send(201, {
              _id: response.id
            });
          }
        });
      }
    });
  } else {
    return db.save(req.body, function(err, response) {
      if (err) {
        console.log("[Create] err: " + JSON.stringify(err));
        return res.send(500, {
          error: err.message
        });
      } else {
        return res.send(201, {
          _id: response.id
        });
      }
    });
  }
};

module.exports.merge = function(req, res, next) {
  delete body._attachments;
  return db.merge(req.params.id, req.body, function(err, response) {
    next();
    if (err) {
      console.log("[Merge] err: " + JSON.stringify(err));
      return res.send(500, {
        error: err.message
      });
    } else {
      return res.send(200, {
        success: true
      });
    }
  });
};
