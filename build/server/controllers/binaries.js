// Generated by CoffeeScript 1.7.1
var db, dbHelper, deleteFiles, fs, log, multiparty;

fs = require("fs");

multiparty = require('multiparty');

log = require('printit')({
  date: true,
  prefix: 'attachment'
});

db = require('../helpers/db_connect_helper').db_connect();

deleteFiles = require('../helpers/utils').deleteFiles;

dbHelper = require('../lib/db_remove_helper');

module.exports.add = function(req, res, next) {
  var form, nofile;
  form = new multiparty.Form();
  form.parse(req);
  nofile = true;
  form.on('part', function(part) {
    var attach, binary, fileData, name, _ref;
    log.debug(part.name + ' ' + part.filename);
    if (part.filename == null) {
      return part.resume();
    } else {
      nofile = false;
      name = part.filename;
      fileData = {
        name: name,
        "content-type": part.headers['content-type']
      };
      attach = function(binDoc) {
        var bin, binList;
        bin = {
          id: binDoc.id,
          rev: binDoc.rev
        };
        if (req.doc.binary) {
          return binList = req.doc.binary;
        } else {
          binList = {};
          binList[name] = bin;
          return db.merge(req.doc._id, {
            binary: binList
          }, function(err) {
            var stream;
            log.info("binary " + name + " ready for storage");
            stream = db.saveAttachment(binDoc, fileData, function(err, binDoc) {
              if (err) {
                log.error("" + (JSON.stringify(err)));
                return form.emit('error', new Error(err.error));
              } else {
                log.info("Binary " + name + " stored in Couchdb");
                return res.send(201, {
                  success: true
                });
              }
            });
            return part.pipe(stream);
          });
        }
      };
      if (((_ref = req.doc.binary) != null ? _ref[name] : void 0) != null) {
        return db.get(req.doc.binary[name].id, function(err, binary) {
          return attach(binary);
        });
      } else {
        binary = {
          docType: "Binary"
        };
        return db.save(binary, function(err, binary) {
          return attach(binary);
        });
      }
    }
  });
  form.on('progress', function(bytesReceived, bytesExpected) {});
  form.on('error', function(err) {
    return next(err);
  });
  return form.on('close', function() {
    if (nofile) {
      res.send(400, {
        error: 'No file sent'
      });
    }
    return next();
  });
};

module.exports.get = function(req, res, next) {
  var err, name, stream;
  name = req.params.name;
  if (req.doc.binary && req.doc.binary[name]) {
    stream = db.getAttachment(req.doc.binary[name].id, 'file', function(err) {
      if (err && (err.error = "not_found")) {
        err = new Error("not found");
        err.status = 404;
        return next(err);
      } else if (err) {
        return next(new Error(err.error));
      }
    });
    if (req.headers['range'] != null) {
      stream.setHeader('range', req.headers['range']);
    }
    stream.pipe(res);
    return res.on('close', function() {
      return stream.abort();
    });
  } else {
    err = new Error("not found");
    err.status = 404;
    return next(err);
  }
};

module.exports.remove = function(req, res, next) {
  var err, id, name;
  name = req.params.name;
  if (req.doc.binary && req.doc.binary[name]) {
    id = req.doc.binary[name].id;
    delete req.doc.binary[name];
    if (req.doc.binary.length === 0) {
      delete req.doc.binary;
    }
    return db.save(req.doc, function(err) {
      return db.get(id, function(err, binary) {
        if (binary != null) {
          return dbHelper.remove(binary, function(err) {
            if ((err != null) && (err.error = "not_found")) {
              err = new Error("not found");
              err.status = 404;
              return next(err);
            } else if (err) {
              console.log("[Attachment] err: " + JSON.stringify(err));
              return next(new Error(err.error));
            } else {
              res.send(204, {
                success: true
              });
              return next();
            }
          });
        } else {
          err = new Error("not found");
          err.status = 404;
          return next(err);
        }
      });
    });
  } else {
    err = new Error("no binary ID is provided");
    err.status = 400;
    return next(err);
  }
};
