// Generated by CoffeeScript 1.9.0
var async, cancelReplication, db, getActiveTasks, getCozyAddressFromUserID, insertResults, mapDoc, mapDocInRules, plug, removeDuplicates, removeNullValues, request, rules, saveReplication, saveRule, shareDocs, startShares, userInArray;

plug = require('./plug');

db = require('../helpers/db_connect_helper').db_connect();

async = require('async');

request = require('request-json');

rules = [];

module.exports.mapDocOnInsert = function(doc, id, callback) {
  return mapDocInRules(doc, id, function(err, mapResults) {
    if (err) {
      return callback(err);
    } else {
      return async.eachSeries(mapResults, insertResults, function(err) {
        console.log('results : ' + JSON.stringify(mapResults));
        return callback(err, mapResults);
      });
    }
  });
};

insertResults = function(mapResult, callback) {
  return async.series([
    function(_callback) {
      if (mapResult.docid != null) {
        return plug.insertDoc(mapResult.docid, mapResult.shareid, mapResult.userDesc, function(err) {
          if (err == null) {
            console.log("doc " + mapResult.docid + " inserted in PlugDB");
          }
          if (err != null) {
            return _callback(err);
          } else {
            return _callback(null);
          }
        });
      } else {
        return _callback(null);
      }
    }, function(_callback) {
      if (mapResult.userid != null) {
        return plug.insertUser(mapResult.userid, mapResult.shareid, mapResult.userDesc, function(err) {
          if (err == null) {
            console.log("user " + mapResult.userid + " inserted in PlugDB");
          }
          if (err != null) {
            return _callback(err);
          } else {
            return _callback(null);
          }
        });
      } else {
        return _callback(null);
      }
    }
  ], function(err) {
    return callback(err);
  });
};

module.exports.selectDocPlug = function(id, callback) {
  return plug.selectSingleDoc(id, function(err, tuple) {
    return callback(err, tuple);
  });
};

module.exports.selectUserPlug = function(id, callback) {
  return plug.selectSingleUser(id, function(err, tuple) {
    return callback(err, tuple);
  });
};

mapDocInRules = function(doc, id, callback) {
  var evalRule;
  evalRule = function(rule, _callback) {
    var filterDoc, filterUser, mapResult, saveResult;
    mapResult = {
      docid: null,
      userid: null,
      shareid: null,
      userParams: null
    };
    saveResult = function(id, shareid, userParams, isDoc) {
      if (isDoc) {
        mapResult.docid = id;
      } else {
        mapResult.userid = id;
      }
      mapResult.shareid = shareid;
      return mapResult.userParams = userParams;
    };
    filterDoc = rule.filterDoc;
    filterUser = rule.filterUser;
    return mapDoc(doc, id, rule.id, filterDoc, function(docMaped) {
      if (docMaped) {
        console.log('doc maped !! ');
      }
      if (docMaped) {
        saveResult(id, rule.id, filterDoc.userParam, true);
      }
      return mapDoc(doc, id, rule.id, filterUser, function(userMaped) {
        if (userMaped) {
          console.log('user maped !! ');
        }
        if (userMaped) {
          saveResult(id, rule.id, filterUser.userParam, false);
        }
        if ((mapResult.docid == null) && (mapResult.userid == null)) {
          return _callback(null, null);
        } else {
          return _callback(null, mapResult);
        }
      });
    });
  };
  return async.map(rules, evalRule, function(err, mapResults) {
    mapResults = Array.prototype.slice.call(mapResults);
    removeNullValues(mapResults);
    return callback(err, mapResults);
  });
};

mapDoc = function(doc, docid, shareid, filter, callback) {
  var ret;
  if (eval(filter.rule)) {
    if (filter.userDesc) {
      ret = eval(filer.userDesc);
    } else {
      ret = true;
    }
    return callback(ret);
  } else {
    return callback(false);
  }
};

module.exports.matchAfterInsert = function(mapResults, callback) {
  var matching;
  matching = function(mapResult, _callback) {
    var id, matchType;
    if (mapResult.docid != null) {
      matchType = plug.MATCH_USERS;
      id = mapResult.docid;
    } else {
      matchType = plug.MATCH_DOCS;
      id = mapResult.userid;
    }
    return plug.matchAll(matchType, id, mapResult.shareid, function(err, acl) {
      if (acl != null) {
        acl = Array.prototype.slice.call(acl);
        acl.unshift(mapResult.shareid);
      }
      if (acl != null) {
        console.log('res match : ' + JSON.stringify(acl));
      }
      return _callback(err, acl);
    });
  };
  if (mapResults != null) {
    return async.mapSeries(mapResults, matching, function(err, acls) {
      if (err) {
        return callback(err);
      } else {
        removeNullValues(acls);
        if ((acls != null) && acls.length > 0) {
          return startShares(acls, function(err) {
            return callback(err);
          });
        } else {
          return callback(null);
        }
      }
    });
  } else {
    return callback(null);
  }
};

startShares = function(acls, callback) {
  var buildShare;
  buildShare = function(acl, _callback) {
    var docID, i, ids, share, userID, _i, _len;
    share = {
      shareID: null,
      users: [],
      docIDs: []
    };
    for (i = _i = 0, _len = acl.length; _i < _len; i = ++_i) {
      ids = acl[i];
      if (i === 0) {
        share.shareID = ids;
      } else {
        userID = ids[0];
        docID = ids[1];
        if (!userInArray(share.users, userID)) {
          share.users.push({
            userID: userID
          });
        }
        if (!(share.users.length > 1)) {
          share.docIDs.push(docID);
        }
      }
    }
    return _callback(null, share);
  };
  return async.map(acls, buildShare, function(err, shares) {
    var share, _i, _len, _results;
    console.log('shares : ' + JSON.stringify(shares));
    _results = [];
    for (_i = 0, _len = shares.length; _i < _len; _i++) {
      share = shares[_i];
      console.log('share : ' + JSON.stringify(share));
      _results.push(getCozyAddressFromUserID(share.userid, function(err, url) {
        share.target = url;
        return shareDocs(share.target, share.docids, function(err, replicationID) {
          if (err != null) {
            return callback(err);
          } else {
            return saveReplication(share.shareid, replicationID, function(err, res) {
              return callback(err, res);
            });
          }
        });
      }));
    }
    return _results;
  });
};


/*

        userShare =
            shareid: null
            userid: null
            target: null
            docids: []
        userShares = []

        tmpUserID = null

             *  An  acl is composed of shareid, [userid, docid]
            for id, i in acl
                 * Case for the shareid
                if i == 0
                    userShare.shareid = id
                else
                    userid = id[0]
                    docid = id[1]

                     * New user share
                    if userid is not tmpUserID orÂ tmpUserID is null
                         * Save previous user share
                        if userShare.userid is not null
                            userShares.push {userShare}
                             * Callback the new userShare
                            console.log 'callback new usershare'
                            _callback userShare
                        tmpUserID = userid
                        userShare.userid = userid
                        userShare.docids.push docid

                    else
                        userShare.docids.push docid

             * last callback
            console.log 'last callback'
            _callback userShare
 */

shareDocs = function(target, ids, callback) {
  var couchClient, couchTarget, repSourceToTarget, repTargetToSource, sourceURL, targetURL;
  couchClient = request.newClient("http://localhost:5984");
  sourceURL = "http://192.168.50.4:5984/cozy";
  targetURL = "http://pzjWbznBQPtfJ0es6cvHQKX0cGVqNfHW:NPjnFATLxdvzLxsFh9wzyqSYx4CjG30U@192.168.50.5:5984/cozy";
  couchTarget = request.newClient(targetURL);
  repSourceToTarget = {
    source: "cozy",
    target: targetURL,
    continuous: true,
    doc_ids: ids
  };
  repTargetToSource = {
    source: "cozy",
    target: sourceURL,
    continuous: true,
    doc_ids: ids
  };
  return couchClient.post("_replicate", repSourceToTarget, function(err, res, body) {
    var replicationID;
    if (err) {
      return callback(err);
    } else if (!body.ok) {
      console.log(JSON.stringify(body));
      return callback(body);
    } else {
      console.log('Replication from source suceeded \o/');
      console.log(JSON.stringify(body));
      replicationID = body._local_id;
      return couchTarget.post("_replicate", repTargetToSource, function(err, res, body) {
        if (err) {
          return callback(err);
        } else if (!body.ok) {
          console.log(JSON.stringify(body));
          return callback(body);
        } else {
          console.log('Replication from target suceeded \o/');
          console.log(JSON.stringify(body));
          return callback(err, replicationID);
        }
      });
    }
  });
};

saveReplication = function(shareID, replicationID, callback) {
  var getRuleById, rule;
  getRuleById = function(shareID, callback) {
    var rule, _i, _len;
    for (_i = 0, _len = rules.length; _i < _len; _i++) {
      rule = rules[_i];
      if (rule.id === shareID) {
        return rule;
      }
    }
  };
  if ((shareID != null) && (replicationID != null)) {
    rule = getRuleById(shareID);
    console.log('rule id found : ' + rule.id + ' for shareid ' + shareID);
    if (rule != null) {
      if (rule.activeReplications != null) {
        rule.activeReplications.push(replicationID);
        db.merge(rule.id, {
          activeReplications: rule.activeReplications
        }, function(err, res) {
          console.log('res merge : ' + JSON.stringify(res));
          return callback(err, res);
        });
      } else {
        rule.activeReplications = [replicationID];
        db.get(shareID, function(err, doc) {
          doc.activeReplications = rule.activeReplications;
          return db.save(shareID, doc, function(err, res) {
            return console.log('res save : ' + JSON.stringify(res));
          });
        });
      }
    } else {
      console.log('no rule found with share id ' + shareID);
    }
  } else {
    console.log('no shareid given');
  }
  return callback(null);
};

cancelReplication = function(replicationID, callback) {
  var couchClient;
  couchClient = request.newClient("http://localhost:5984");
  return couchClient.post("_replicate", {
    replication_id: replicationID,
    cancel: true
  }, function(err, res, body) {
    if (err) {
      return callback(err);
    } else if (!body.ok) {
      console.log(JSON.stringify(body));
      return callback(body);
    } else {
      console.log('Cancel replication ok');
      return callback();
    }
  });
};

getCozyAddressFromUserID = function(userID, callback) {
  return db.get(userID, function(err, user) {
    if (user != null) {
      console.log('user url : ' + user.url);
    }
    if (err != null) {
      return callback(err);
    } else {
      return callback(null, user.url);
    }
  });
};

getActiveTasks = function(client, callback) {
  return client.get("_active_tasks", function(err, res, body) {
    var repIds, task;
    if (err || (body.length == null)) {
      return callback(err);
    } else {
      repIds = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = body.length; _i < _len; _i++) {
          task = body[_i];
          if (task.replication_id) {
            _results.push(task.replication_id);
          }
        }
        return _results;
      })();
      return callback(null, repIds);
    }
  });
};

module.exports.createRule = function(doc, callback) {};

module.exports.deleteRule = function(doc, callback) {};

module.exports.updateRule = function(doc, callback) {};

saveRule = function(rule, callback) {
  var activeReplications, filterDoc, filterUser, id, name;
  id = rule._id;
  name = rule.name;
  filterDoc = rule.filterDoc;
  filterUser = rule.filterUser;
  if (rule.activeReplications) {
    activeReplications = rule.activeReplications;
  }
  return rules.push({
    id: id,
    name: name,
    filterDoc: filterDoc,
    filterUser: filterUser,
    activeReplications: activeReplications
  });
};

module.exports.insertRules = function(callback) {
  var insertShare;
  insertShare = function(rule, _callback) {
    return plug.insertShare(rule.id, '', function(err) {
      return _callback(err);
    });
  };
  return async.eachSeries(rules, insertShare, function(err) {
    return callback(err);
  });
};

module.exports.initRules = function(callback) {
  return db.view('sharingRules/all', function(err, rules) {
    if (err != null) {
      return callback(new Error("Error in view"));
    }
    rules.forEach(function(rule) {
      return saveRule(rule);
    });
    return callback();
  });
};

userInArray = function(array, userID) {
  var ar, _i, _len;
  for (_i = 0, _len = array.length; _i < _len; _i++) {
    ar = array[_i];
    if (ar.userID === userID) {
      return true;
    }
  }
  return false;
};

removeNullValues = function(array) {
  var i, _i, _ref, _results;
  _results = [];
  for (i = _i = _ref = array.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
    if (array[i] === null) {
      _results.push(array.splice(i, 1));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

removeDuplicates = function(array) {
  var key, res, value, _i, _ref, _results;
  if (array.length === 0) {
    return [];
  }
  res = {};
  for (key = _i = 0, _ref = array.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; key = 0 <= _ref ? ++_i : --_i) {
    res[array[key]] = array[key];
  }
  _results = [];
  for (key in res) {
    value = res[key];
    _results.push(value);
  }
  return _results;
};
