// Generated by CoffeeScript 1.9.0
var async, db, log,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

log = require('printit')({
  date: true,
  prefix: 'lib/init'
});

db = require('../helpers/db_connect_helper').db_connect();

async = require('async');

exports.removeLostBinaries = function(callback) {
  return db.view('binary/all', function(err, binaries) {
    if (!err && binaries.length > 0) {
      return db.view('binary/byDoc', function(err, docs) {
        var doc, keys, _i, _len;
        if ((err != null) || (docs == null)) {
          return callback();
        }
        keys = [];
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          doc = docs[_i];
          keys.push(doc.key);
        }
        return async.forEachSeries(binaries, (function(_this) {
          return function(binary, cb) {
            var _ref;
            if (_ref = binary.id, __indexOf.call(keys, _ref) < 0) {
              log.info("Remove binary " + binary.id);
              return db.get(binary.id, function(err, doc) {
                if (!err && doc) {
                  return db.remove(doc._id, doc._rev, function(err, doc) {
                    if (err) {
                      log.error(err);
                    }
                    return cb();
                  });
                } else {
                  if (err) {
                    log.error(err);
                  }
                  return cb();
                }
              });
            } else {
              if (err) {
                log.error(err);
              }
              return cb();
            }
          };
        })(this), callback);
      });
    } else {
      if (err != null) {
        log.error(err);
      }
      return callback(err);
    }
  });
};
