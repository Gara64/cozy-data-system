// Generated by CoffeeScript 1.9.0
var checkAccess, checkToken, db, fs, initAccess, initHomeProxy, permissions, productionOrTest, tokens, updatePermissions;

db = require('../helpers/db_connect_helper').db_connect();

fs = require('fs');

permissions = {};

tokens = {};

productionOrTest = process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test";

checkToken = function(auth, callback) {
  var password, username;
  if (auth !== "undefined" && (auth != null)) {
    auth = auth.substr(5, auth.length - 1);
    auth = new Buffer(auth, 'base64').toString('ascii');
    username = auth.split(':')[0];
    password = auth.split(':')[1];
    if (password !== void 0 && tokens[username] === password) {
      return callback(null, true, username);
    } else {
      return callback(null, false, username);
    }
  } else {
    return callback(null, false, null);
  }
};

module.exports.checkDocType = function(auth, docType, callback) {
  if (productionOrTest) {
    return checkToken(auth, (function(_this) {
      return function(err, isAuthenticated, name) {
        if (isAuthenticated) {
          if (docType != null) {
            docType = docType.toLowerCase();
            if (permissions[name][docType] != null) {
              return callback(null, name, true);
            } else if (permissions[name]["all"] != null) {
              return callback(null, name, true);
            } else {
              return callback(null, name, false);
            }
          } else {
            return callback(null, name, true);
          }
        } else {
          return callback(null, false, false);
        }
      };
    })(this));
  } else {
    return checkToken(auth, function(err, isAuthenticated, name) {
      if (name == null) {
        name = 'unknown';
      }
      return callback(null, name, true);
    });
  }
};

module.exports.checkProxyHome = function(auth, callback) {
  var password, username;
  if (productionOrTest) {
    if (auth !== "undefined" && (auth != null)) {
      auth = auth.substr(5, auth.length - 1);
      auth = new Buffer(auth, 'base64').toString('ascii');
      username = auth.split(':')[0];
      password = auth.split(':')[1];
      if (password !== void 0 && tokens[username] === password) {
        if (username === "proxy" || username === "home") {
          return callback(null, true);
        } else {
          return callback(null, false);
        }
      } else {
        return callback(null, false);
      }
    } else {
      return callback(null, false);
    }
  } else {
    return callback(null, true);
  }
};

updatePermissions = function(access, callback) {
  var description, docType, login, _ref;
  login = access.login;
  if (productionOrTest) {
    if (access.token != null) {
      tokens[login] = access.token;
    }
    permissions[login] = {};
    if (access.permissions != null) {
      _ref = access.permissions;
      for (docType in _ref) {
        description = _ref[docType];
        permissions[login][docType.toLowerCase()] = description;
      }
    }
    if (callback != null) {
      return callback();
    }
  } else {
    if (callback != null) {
      return callback();
    }
  }
};

checkAccess = function(app, cb) {
  if (app.access) {
    return cb(app.access);
  } else if (app._id) {
    return db.view('access/byApplication', {
      key: app._id
    }, function(err, body) {
      if (body.length > 0) {
        return cb(body[0].value);
      } else {
        return cb(false);
      }
    });
  } else {
    return cb(false);
  }
};

module.exports.addApplicationAccess = function(application, callback) {
  return checkAccess(application, function(access) {
    if (access) {
      application.access = access;
      return db.get(access, function(err, doc) {
        delete permissions[doc.login];
        delete tokens[doc.login];
        doc.login = application.slug;
        if (application.password != null) {
          doc.token = application.password;
        }
        doc.permissions = application.permissions;
        return db.save(doc._id, doc, function(err, body) {
          if (err != null) {
            log.error(err);
          }
          delete application.password;
          return updatePermissions(doc, function() {
            if (callback != null) {
              return callback(null, application);
            }
          });
        });
      });
    } else {
      access = {
        docType: "Access",
        login: application.slug,
        token: application.password,
        permissions: application.permissions
      };
      return db.save(access, function(err, doc) {
        if (err != null) {
          log.error(err);
        }
        application.access = doc._id;
        delete application.password;
        return updatePermissions(access, function() {
          if (callback != null) {
            return callback(null, application);
          }
        });
      });
    }
  });
};

module.exports.addDeviceAccess = function(device, callback) {
  var access, defaultPermissions;
  console.log(device);
  if (device.type === "desktop") {
    defaultPermissions = {
      file: "Should access to file to synchronize it",
      folder: "Should access to folder to synchronize it",
      binary: "Should access to file contents"
    };
  } else {
    defaultPermissions = {
      file: "Should access to file to synchronize it",
      folder: "Should access to folder to synchronize it",
      binary: "Should access to file contents",
      notification: "Should access to notification to synchronize it",
      contact: "Should access to contact to synchronize it"
    };
  }
  console.log(defaultPermissions);
  checkAccess(device, function(acces) {});
  if (access) {
    device.access = access;
    return db.get(access, function(err, doc) {
      delete permissions[doc.login];
      delete tokens[doc.login];
      doc.login = device.login;
      doc.token = device.password;
      doc.permissions = device.permissions || defaultPermissions;
      ({
        permissions: {
          file: "Should access to file to synchronize it",
          folder: "Should access to folder to synchronize it",
          notification: "Should access to notification to synchronize it",
          contact: "Should access to contact to synchronize it"
        }
      });
      db.save(doc, function(err, doc) {});
      if (err != null) {
        log.error(err);
      }
      delete device.password;
      return updatePermissions(access, function() {
        return callback(null, device);
      });
    });
  } else {
    access = {
      docType: "Access",
      login: device.login,
      token: device.password
    };
    access.permissions = device.permissions || defaultPermissions;
    return db.save(access, function(err, doc) {
      if (err != null) {
        log.error(err);
      }
      device.access = doc._id;
      delete device.password;
      return updatePermissions(access, function() {
        return callback(null, device);
      });
    });
  }
};

module.exports.removeAccess = function(app, callback) {
  if (productionOrTest && (app.access != null)) {
    return db.get(app.access, function(err, doc) {
      delete permissions[doc.login];
      delete tokens[doc.login];
      return db.remove(app.access, callback);
    });
  }
};

initHomeProxy = function(callback) {
  var token;
  token = process.env.TOKEN;
  token = token.split('\n')[0];
  tokens['home'] = token;
  permissions.home = {
    "application": "authorized",
    "notification": "authorized",
    "user": "authorized",
    "device": "authorized",
    "alarm": "authorized",
    "event": "authorized",
    "userpreference": "authorized",
    "cozyinstance": "authorized",
    "encryptedkeys": "authorized",
    "stackapplication": "authorized",
    "send mail to user": "authorized"
  };
  tokens['proxy'] = token;
  permissions.proxy = {
    "user": "authorized",
    "cozyinstance": "authorized",
    "device": "authorized",
    "usetracker": "authorized",
    "send mail to user": "authorized"
  };
  return callback(null);
};

initAccess = function(access, callback) {
  var description, docType, name, _ref;
  name = access.login;
  tokens[access] = access.token;
  if ((access.permissions != null) && access.permissions !== null) {
    permissions[name] = {};
    _ref = access.permissions;
    for (docType in _ref) {
      description = _ref[docType];
      docType = docType.toLowerCase();
      permissions[name][docType] = description;
    }
  }
  return callback(null);
};

module.exports.init = function(callback) {
  if (productionOrTest) {
    return initHomeProxy(function() {
      return db.view('access/all', function(err, accesses) {
        if (err != null) {
          return callback(new Error("Error in view"));
        }
        accesses.forEach(function(access) {
          return initAccess(access, function() {});
        });
        console.log(permissions);
        return callback(tokens, permissions);
      });
    });
  } else {
    return callback(tokens, permissions);
  }
};
