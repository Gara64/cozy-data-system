// Generated by CoffeeScript 1.9.1
var async, checkPermissions, db, deleteFiles, helpers, locker, logger;

locker = require('../lib/locker');

db = require('../helpers/db_connect_helper').db_connect();

logger = require('printit')({
  prefix: 'middleware/utils'
});

async = require('async');

helpers = require('../helpers/utils');

checkPermissions = helpers.checkPermissions;

deleteFiles = helpers.deleteFiles;

module.exports.lockRequest = function(req, res, next) {
  req.lock = req.params.id || req.params.type;
  return locker.runIfUnlock(req.lock, function() {
    locker.addLock(req.lock);
    return next();
  });
};

module.exports.unlockRequest = function(req, res) {
  return locker.removeLock(req.lock);
};

module.exports.getDoc = function(req, res, next) {
  return db.get(req.params.id, function(err, doc) {
    if (err) {
      logger.error(err);
      deleteFiles(req.files);
      return next(err);
    } else if (doc != null) {
      req.doc = doc;
      return next();
    } else {
      deleteFiles(req.files);
      return next(errors.http(404, 'Not found'));
    }
  });
};

module.exports.checkPermissionsFactory = function(permission) {
  return function(req, res, next) {
    return checkPermissions(req, permission, next);
  };
};

module.exports.checkPermissionsByDoc = function(req, res, next) {
  return checkPermissions(req, req.doc.docType, next);
};

module.exports.checkPermissionsByBody = function(req, res, next) {
  return checkPermissions(req, req.body.docType, next);
};

module.exports.checkPermissionsByType = function(req, res, next) {
  return checkPermissions(req, req.params.type, next);
};

module.exports.checkPermissionsPostReplication = function(req, res, next) {
  var err;
  if (req.url === '/replication/_revs_diff') {
    return next();
  } else if (req.url === '/replication/_ensure_full_commit') {
    return next();
  } else if (req.url.indexOf('/replication/_changes') === 0) {
    return next();
  } else if (req.url === '/replication/_bulk_docs') {
    return async.forEach(req.body.docs, function(doc, cb) {
      if (doc._deleted) {
        return db.get(doc._id, function(err, doc) {
          return checkPermissions(req, doc.docType, cb);
        });
      } else {
        return checkPermissions(req, doc.docType, cb);
      }
    }, next);
  } else {
    err = new Error("Forbidden operation");
    err.status = 403;
    return next(err);
  }
};

module.exports.checkPermissionsGetReplication = function(req, res, next) {
  var doc, end, start;
  start = req.body.indexOf('{');
  end = req.body.lastIndexOf('}');
  doc = req.body.substring(start, end + 1);
  doc = JSON.parse(doc);
  if (doc && doc.docType) {
    return checkPermissions(req, doc.docType, function(err) {
      if (err) {
        res.body = {};
        return next(err);
      } else {
        res.set(req.info[0]);
        res.statusCode = req.info[1];
        return res.send(req.body);
      }
    });
  } else {
    res.set(req.info[0]);
    res.statusCode = req.info[1];
    return res.send(req.body);
  }
};

module.exports.checkPermissionsPutReplication = function(req, res, next) {
  var err;
  if (req.url.indexOf('/replication/_local') === 0) {
    return next();
  } else {
    err = new Error("Forbidden operation");
    err.status = 403;
    return next(err);
  }
};
