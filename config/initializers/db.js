// Generated by CoffeeScript 1.6.3
var Client, S, couchClient, couchUrl, fs, initTokens, request;

fs = require('fs');

S = require('string');

Client = require("request-json").JsonClient;

couchUrl = "http://localhost:5984/";

couchClient = new Client(couchUrl);

initTokens = require('../../lib/token').init;

request = require('../../lib/request');

module.exports = function(compound) {
  var Feed, addCozyAdmin, addCozyUser, app, db, db_create, db_ensure, feed_start, initLoginCouch, logCreated, logError, logFound, request_create;
  Feed = require('../../helpers/db_feed_helper');
  db = require('../../helpers/db_connect_helper').db_connect();
  app = compound.app;
  /* Helpers*/

  initLoginCouch = function() {
    var data, lines;
    data = fs.readFileSync('/etc/cozy/couchdb.login');
    lines = S(data.toString('utf8')).lines();
    return lines;
  };
  addCozyAdmin = function(callback) {
    var data, loginCouch;
    loginCouch = initLoginCouch();
    data = {
      "admins": {
        "names": [loginCouch[0]],
        "roles": []
      },
      "readers": {
        "names": [loginCouch[0], 'proxy'],
        "roles": []
      }
    };
    couchClient.setBasicAuth(loginCouch[0], loginCouch[1]);
    return couchClient.put('cozy/_security', data, function(err, res, body) {
      return callback(err);
    });
  };
  addCozyUser = function(callback) {
    var data, loginCouch;
    loginCouch = initLoginCouch();
    data = {
      "_id": "org.couchdb.user:proxy",
      "name": "proxy",
      "type": "user",
      "roles": [],
      "password": process.env.TOKEN
    };
    couchClient.setBasicAuth(loginCouch[0], loginCouch[1]);
    return couchClient.post('_users', data, function(err, res, body) {
      return callback(err);
    });
  };
  /* Logger*/

  logFound = function() {
    console.info(("Database " + db.name + " on " + db.connection.host) + (":" + db.connection.port + " found."));
    feed_start();
    return request_create();
  };
  logError = function(err) {
    console.info("Error on database creation : ");
    return console.info(err);
  };
  logCreated = function() {
    console.info(("Database " + db.name + " on") + (" " + db.connection.host + ":" + db.connection.port + " created."));
    feed_start();
    return request_create();
  };
  /* Check existence of cozy database or create it*/

  db_ensure = function(callback) {
    return db.exists(function(err, exists) {
      var loginCouch,
        _this = this;
      if (err) {
        return compound.logger.write("Error:", err);
      } else if (exists) {
        if (process.env.NODE_ENV === 'production') {
          loginCouch = initLoginCouch();
          couchClient.setBasicAuth(loginCouch[0], loginCouch[1]);
          return couchClient.get('cozy/_security', function(err, res, body) {
            var _ref;
            if ((body.admins == null) || body.admins.names[0] !== loginCouch[0] || ((_ref = body.readers) != null ? _ref.names[0] : void 0) !== 'proxy') {
              return addCozyUser(function(err) {
                var _this = this;
                if (err) {
                  compound.logger.write("Error on database" + (" Add user : " + err));
                  return callback();
                } else {
                  return addCozyAdmin(function(err) {
                    if (err) {
                      compound.logger.write("Error on database" + (" Add admin : " + err));
                      return callback();
                    } else {
                      logFound();
                      return callback();
                    }
                  });
                }
              });
            } else {
              logFound();
              return callback();
            }
          });
        } else {
          logFound();
          return callback();
        }
      } else {
        return db_create(callback);
      }
    });
  };
  db_create = function(callback) {
    compound.logger.write(("Database " + db.name + " on") + (" " + db.connection.host + ":" + db.connection.port + " doesn't exist."));
    return db.create(function(err) {
      if (err) {
        logError(err);
        return db_create(callback);
      } else if (process.env.NODE_ENV === 'production') {
        return addCozyUser(function(err) {
          var _this = this;
          if (err) {
            compound.logger.write("Error on database" + (" Add user : " + err));
            return callback();
          } else {
            return addCozyAdmin(function(err) {
              if (err) {
                logError(err);
                return callback();
              } else {
                logCreated();
                return callback();
              }
            });
          }
        });
      } else {
        logCreated();
        return callback();
      }
    });
  };
  request_create = function() {
    var _this = this;
    db.get('_design/doctypes', function(err, doc) {
      if (err && err.error === "not_found") {
        return db.save('_design/doctypes', {
          all: {
            map: function(doc) {
              if (doc.docType) {
                return emit(doc.docType, null);
              }
            },
            reduce: function(key, values) {
              return true;
            }
          }
        });
      }
    });
    db.get('_design/device', function(err, doc) {
      if (err && err.error === "not_found") {
        return db.save('_design/device', {
          all: {
            map: function(doc) {
              if (doc.docType && (doc.docType === "Device")) {
                return emit(doc._id, doc);
              }
            }
          },
          byLogin: {
            map: function(doc) {
              if (doc.docType && (doc.docType === "Device")) {
                return emit(doc.login, doc);
              }
            }
          }
        });
      }
    });
    return db.get('_design/tags', function(err, doc) {
      if (err && err.error === "not_found") {
        return db.save('_design/tags', {
          all: {
            map: function(doc) {
              var _ref;
              return (_ref = doc.tags) != null ? typeof _ref.forEach === "function" ? _ref.forEach(function(tag) {
                return emit(tag, null);
              }) : void 0 : void 0;
            },
            reduce: function(key, values) {
              return true;
            }
          }
        });
      }
    });
  };
  feed_start = function() {
    app.feed.startListening(db);
    return app.emit('db ready');
  };
  app.feed = new Feed(app);
  return db_ensure(function() {
    var _this = this;
    return initTokens(function(tokens, permissions) {
      return request.init(function(err) {});
    });
  });
};
