// Generated by CoffeeScript 1.8.0
var async, db, mapDoc, mapDocInRules, plug, rules, saveRule;

plug = require('./plug');

db = require('../helpers/db_connect_helper').db_connect();

async = require('async');

rules = [];

module.exports.mapDocOnInsert = function(doc, id, callback) {
  return mapDocInRules(doc, id, function(err, results) {
    if (err || (results == null)) {
      return callback(err);
    } else {
      return async.series([
        function(_callback) {
          if (results[0]) {
            return plug.insertDoc(results[0].docid, results[0].userDesc, function(err) {
              if (err != null) {
                return callback(err);
              } else {
                return callback(null, results[0].id);
              }
            });
          } else {
            return callback(null);
          }
        }, function(_callback) {
          if (results[1]) {
            return plug.insertUser(results[1].docid, results[1].userDesc, function(err) {
              if (err != null) {
                return callback(err);
              } else {
                return callback(null, results[1].id);
              }
            });
          } else {
            return callback(null);
          }
        }
      ], function(err, results) {
        return callback(err, results);
      });
    }
  });
};

module.exports.selectDocPlug = function(id, callback) {
  return plug.selectSingleDoc(id, function(err, tuple) {
    return callback(err, tuple);
  });
};

module.exports.selectUserPlug = function(id, callback) {
  return plug.selectSingleUser(id, function(err, tuple) {
    return callback(err, tuple);
  });
};

mapDocInRules = function(doc, id, callback) {
  return rules.forEach(function(rule) {
    console.log('rule : ' + JSON.stringify(rule));
    return async.parallel([
      function(_callback) {
        console.log('doc : ' + JSON.stringify(doc));
        return mapDoc(doc, id, rule.filterDoc, function(filteredDoc) {
          if (filteredDoc) {
            console.log('doc maped !! ' + JSON.stringify(filteredDoc));
          }
          return _callback(null, filteredDoc);
        });
      }, function(_callback) {
        return mapDoc(doc, id, rule.filterUser, function(filteredUser) {
          if (filteredUser) {
            console.log('user maped !! ' + JSON.stringify(filteredUser));
          }
          return _callback(null, filteredUser);
        });
      }
    ], function(err, results) {
      if ((results[0] != null) || (Â results[1] != null)) {
        console.log('got a mapping !! ' + JSON.stringify(results));
      }
      return callback(err, results);
    });
  });
};

mapDoc = function(doc, docid, filter, callback) {
  var user_desc;
  console.log('eval ' + JSON.stringify(filter.rule + ' for the doc ' + JSON.stringify(doc)));
  if (eval(filter.rule)) {
    user_desc = filter.userDesc ? eval(filter.userDesc) : void 0;
    return callback({
      docid: docid,
      user_desc: user_desc
    });
  } else {
    return callback(null);
  }
};

module.exports.createRule = function(doc, callback) {};

module.exports.deleteRule = function(doc, callback) {};

module.exports.updateRule = function(doc, callback) {};

saveRule = function(rule, callback) {
  var filterDoc, filterUser, name;
  name = rule.name;
  filterDoc = rule.filterDoc;
  filterUser = rule.filterUser;
  return rules.push({
    name: name,
    filterDoc: filterDoc,
    filterUser: filterUser
  });
};

module.exports.initRules = function(callback) {
  return db.view('sharingRules/all', function(err, rules) {
    if (err != null) {
      return callback(new Error("Error in view"));
    }
    rules.forEach(function(rule) {
      return saveRule(rule);
    });
    return callback();
  });
};
