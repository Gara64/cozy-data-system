Sharing = require '../lib/sharing'
async = require 'async'
access = require './access'

db = require('../helpers/db_connect_helper').db_connect()

# ---Â Creation of the share document.
# The share document is a document that represents the sharing process that was
# initiated and that we store in the database for further use.
#
# The structure of a share document is as following
# shareDoc {
#   id        -> the id of the sharing process
#   fDoc      -> a filter on the documents to determine which documents need to
#                be shared
#   fUser     -> a filter on the users to determine to whom we need to share
#                the documents
#   desc      -> a description of the sharing process
#   docIDs[]  -> an array containing the ids of the documents to share. These
#                ids were determined thanks to the filter "fDoc"
#   targets[] -> an array containing the users to whom the documents will be
#                shared. This array contains "target" a custom structure that
#                will hold all the information required to share with that
#                particular user.
# }
#
# The structure target:
# target {
#   url           -> the url of the user's cozy
#   pwd           -> the password linked to the sharing process
#   replicationID -> the id generated by CouchDB for the replication. The
#                    replication is a process linked to Couch in order to
#                    replicate documents between Couch instances.
# }
#
# We suppose in this function that the data we receive is already in the
# correct format. That means we will receive a "share" object that has all its
# fields filled as needed.
#
module.exports.create = (req, res, next) ->
    # check if the information is available
    if not req.share?
        err = new Error "Bad request"
        err.status = 400
        next err
    else
        # get a hold on the information
        share = req.share

        # put the share document in the database
        db.save share, (err, res) ->
            if err?
                next err
            else
                next()


# Send a sharing request for each target defined in the share object
module.exports.requestTarget = (req, res, next) ->
    if not req.share?
        err = new Error "Bad request"
        err.status = 400
        next err
    else
        share = req.share
        params =
            shareID: share.id
            desc: share.desc
            sync: share.isSync
            hostUrl: share.hostUrl

        # Notify each target
        async.each share.targets, (target, callback) ->
             Sharing.notifyTarget target.url, params, (err) ->
                callback err
        , (err) ->
            return next err if err?
            res.send 200, success: true


# Create access if the sharing answer is yes, remove the UserSharing doc otherwise.
# Send the answer to the host
module.exports.sendAnswer = (req, res, next) ->

    ### Params must contains :
    id (usersharing)
    shareID
    accepted
    targetUrl
    docIDs
    hostUrl
    ###

    params = req.params
    answer =
        shareID: params.shareID
        url: params.url
        accepted: params.accepted


    # Create an access is the sharing is accepted
    if answer.accepted is yes
        createUserAccess params, (err, data) ->
            return next err if err?

            answer.pwd = data.password
            Sharing.answerHost params.hostUrl, answer, next
    # Delete the associated doc if the sharing is refused
    else
        db.remove params.id, (err, res) ->
            return next err if err?
            Sharing.answerHost params.hostUrl, answer, next


# Create an access for a user on a given share
createUserAccess = (userSharing, callback) ->

    access =
        login: userSharing.shareID
        password: randomString 32
        app: userSharing.id
        permissions: userSharing.docIDs

    access.create access, (err, result, body) ->
        return callback(err) if err?
        data =
            password: access.password
            login: userSharing.shareID
            permissions: access.permissions
        # Return access to user
        callback null, data


# Process the answer given by the target regarding the sharing request that was
# sent to him.
#
# The structure of the answer received is as following:
# answer {
#   shareID    -> the id of the sharing request
#   url        -> the url of the target
#   accepted   -> wether or not the target has accepted the request
#   pwd        -> the password generated by the target
# }
#
module.exports.validateTarget = (req, res, next) ->
    if not req.answer?
        # send an error explaining that the answer received has not the
        # expected format or just isn't there
        err = new Error "Bad request"
        err.status = 400
        next err

    else
        # we get a hold on the share document stored in the database that
        # represents this sharing process
        shareDoc = db.get req.answer.shareID, (err, doc) ->
            if err?
                next err
            else
                return doc

        # we get the index of the current target in the array containing all
        # the targets of the sharing process
        target_index = shareDoc.targets.indexOf req.target
        if target_index > -1
            err = new Error "Document was not found in database"
            err.status = 404
            next err

        # Then we check if the target has accepted the request
        # ...or not: if the target has not then we remove his entry from the
        # array containing all the targets for the sharing process
        if !req.answer.accepted
            shareDoc.targets.splice target_index, 1

        # The target has accepted the request
        else
            # we add the password to the share document
            shareDoc.targets[target_index].pwd = req.answer.pwd

        # push the modification of the share document in the database and if
        # this operation was successful launch the replication!
        db.save shareDoc, (err, res) ->
            if err?
                next err
            else
                # we create a params structure for the replication function
                req.params =
                    pwd: req.answer.pwd
                    url: req.answer.url
                    id: shareDoc.id
                    docIDs: shareDoc.docIDs
                    isSync: shareDoc.isSync

                # let's replicate
                next()

module.exports.replicate = (req, res, next) ->

    share = req.share
    target = req.target

    # Replicate on the validated target
    if target.pwd?
        params =
            url: target.url
            login: share.id
            pwd: target.url
            docIDs: share.docIDs
            isSync: share.isSync

        Sharing.replicateDocs params, (err) ->
            return next err if err?
            res.send 200, success: true
    else
        res.send 200, success: true
