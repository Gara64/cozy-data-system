Sharing = require '../lib/sharing'
async = require 'async'
crypto = require("crypto")

addAccess = require('../lib/token').addAccess
db = require('../helpers/db_connect_helper').db_connect()

# Randomly generates a password.
# Note that with a long enough password (eg 256), it
# could be used as an AES key to encrypt data
generatePassword = (length) ->
    return crypto.randomBytes(length)


# --- Creation of the Sharing document.
#
# The structure of a Sharing document is as following
# shareDoc {
#   id        -> the id of the sharing process, it is generated when the
#                document is inserted in the database
#   desc      -> a human-readable description of what is shared
#   rules[]   -> a set of rules describing which documents will be shared,
#                providing their id and their docType
#   targets[] -> an array containing the users to whom the documents will be
#                shared. See below for a description of this structure.
#   sync      -> boolean that indicates if the sharing is synchronize or not
#                The sync is one-way, from sharer to recipient
#   docType   -> Automatically set at 'sharing'
# }
#
# The target structure:
# target {
#   url           -> the url of the cozy's recipient
#   pwd           -> the password linked to the sharing process
#   replicationID -> the id generated by CouchDB for the replication. The
#                    replication is a process linked to Couch in order to
#                    replicate documents between Couch instances.
# }
#
# We suppose in this function that the data we receive is already in the
# correct format. That means we will receive a "share" object that has all its
# fields filled as needed.
module.exports.create = (req, res, next) ->
    share = req.body
    # check if the information is available
    if not share?
        err = new Error "Bad request"
        err.status = 400
        next err
    else
        # The docType is fixed
        share.docType = "sharing"

        # save the share document in the database
        db.save share, (err, res) ->
            if err?
                next err
            else
                share.id = res._id
                req.share = share
                next()

# Delete an existing sharing
# params {
#    id    -> the id of the sharing process, i.e. the shareID
# }
module.exports.delete = (req, res, next) ->
    share = req.body
    # check if the information is available
    if not share?
        err = new Error "Bad request"
        err.status = 400
        next err
    else
        # Get all the targets in the sharing document
        db.get share.id, (err, doc) ->
            if err?
                next err
            else
                share.targets = doc.targets
                # Notification message
                share.desc = "The sharing #{share.id} has been deleted"

                # remove the sharing document in the database
                db.remove share.id, (err, res) ->
                    return next err if err?
                    req.share = share
                    next()

# Send a notification for each target defined in the share object
# The minimum structure is the following :
# share {
#   id         -> the id of the sharing process, i.e. the shareID
#   targets[]  -> the targets to notify. Each target must have an url
#   desc       -> the description of the notification
# }
# Note that additional fields can be specified, depending on the request's type
module.exports.notifyTargets = (req, res, next) ->
    if not req.share?
        err = new Error "Bad request"
        err.status = 400
        next err
    else
        share = req.share
        # Get the cozy's url
        Sharing.getDomain (err, domain) ->
            if err?
                next new Error 'No instance domain set'
            else
                share.hostUrl = domain

                # XXX Debug
                console.log 'request : ' + JSON.stringify share

                # Notify each target
                async.each share.targets, (target, callback) ->
                   
                    Sharing.notifyTarget target.url, share, (err, result, body) ->
                        if err?
                            callback err
                        else if not result?.statusCode?
                            err = new Error "Bad request"
                            err.status = 400
                            callback err
                        else
                            res.send result.statusCode, body
                            callback()

                , (err) ->
                    return next err if err?


# Create access if the sharing answer is yes, remove the Sharing doc otherwise.
#
# A "Sharing document" is created when a sharing request is received.
# This behavior was chosen for persistence: if we store it on RAM
# until the user validates then the request could be lost if the server
# reboots. It is not much of a problem since creating a document is much like
# receiving an e-mail.
#
# Params must contains :
#   * id        -> the id of the "Sharing document", created when the sharing
#                  request was received
#   * shareID   -> the id of the "sharing document" created by the sharer
#                  this will be used as the sharer's login
#   * accepted  -> boolean specifying if the share was accepted or not
#   * url       -> the url of the cozy
#   * rules     -> the set of rules specifying exactly which documents are
#                  shared with their docTypes.
#   * hostUrl   -> the url of the sharer's cozy
module.exports.handleRecipientAnswer = (req, res, next) ->

    if not req.body?
        err = new Error "Bad request"
        err.status = 400
        next err
    params = req.body

    # Create an access is the sharing is accepted
    if params.accepted is yes

        access =
            login: params.shareID
            password: generatePassword 256
            id: params.id
            rules: params.rules

        addAccess access, (err, doc) ->
            return next err if err?

            params.pwd = access.password
            req.params = params
            next()

        # TODO : update validation_doc to control the docType update

    # Delete the Sharing doc if the sharing is refused
    else
        db.remove req.params.id, (err, res) ->
            return next err if err?
            req.params = params
            next()


# Send the answer to the emitter of the sharing request
#
# Params must contain:
#   * shareID  -> the id of the "sharing document" generated by the emitter
#   * url      -> the url of the receiver's cozy
#   * accepted -> boolean telling if request was accepted/denied
#   * pwd      -> the password generated by the receiver if the request was
#                 accepted
#   * hostUrl  -> the url of the emitter's cozy
module.exports.sendAnswer = (req, res, next) ->

    # XXX DEBUG
    console.log 'params ' + JSON.stringify req.params

    params = req.body
    if not params?
        err = new Error "Bad request"
        err.status = 400
        next err
    else
        answer =
            shareID: params.shareID
            url: params.url
            accepted: params.accepted
            pwd: params.pwd

        Sharing.answerHost params.hostUrl, answer, (err, result, body) ->
            if err?
                next err
            else if not result?.statusCode?
                err = new Error "Bad request"
                err.status = 400
                next err
            else
                res.send result.statusCode, body


# Process the answer given by the target regarding the sharing request
# sent to him.
#
# The structure of the answer received is as following:
# answer {
#   shareID    -> the id of the sharing request
#   url        -> the url of the target
#   accepted   -> whether or not the target has accepted the request
#   pwd        -> the password generated by the target
# }
#
module.exports.validateTarget = (req, res, next) ->
    console.log 'answer : ' + JSON.stringify req.body

    answer = req.body
    if not answer?
        err = new Error "Bad request"
        err.status = 400
        next err

    else
        # Get the Sharing document thanks to its id
        db.get answer.shareID, (err, doc) ->
            return next err if err?

            # Get the answering target
            target = t for t in doc.targets when t.url = answer.url
            if not target?
                err = new Error answer.url + " not found for this sharing"
                err.status = 404
                next err
            else
                # Save the password if the target has accepted the sharing
                # Remove the target otherwise
                if answer.accepted
                    target.pwd = answer.pwd
                else
                    i = doc.targets.indexOf target
                    doc.targets.splice i, 1

                # Update the Sharing doc
                db.merge doc._id, doc, (err, res) ->
                    return next err if err?

                    # Params structure for the replication
                    params =
                        pwd: answer.pwd
                        url: answer.url
                        id: doc._id
                        docIDs: doc.docIDs
                        sync: doc.sync

                    req.params = params
                    next()


# Replicate documents to the specified url

# The structure of the replication :
# params {
#   id         -> the Sharing id, used as a login
#   pwd        -> the password generated by the target
#   url        -> the url of the target
#   docIDs     -> the docIDs to replicate
# }
#
module.exports.replicate = (req, res, next) ->
    params = req.params
    # Replicate on the validated target
    if params.pwd?
        Sharing.replicateDocs params, (err, repID) ->
            if err?
                next err
            else if not repID?
                err = new Error "Replication failed"
                err.status = 500
                next err
            # TODO : update the db
            if repID?
                res.send 200, success: true
    else
        res.send 200, success: true
